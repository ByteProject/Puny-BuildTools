Resident data ends at 5b0, program starts at 5b0, file ends at f20

Starting analysis pass at address 5b0

End of analysis pass, low address = 5b0, high address = bf4

[Start of code at 5b0]

Main routine 5b0, 0 locals

  5b1:  e0 3f 02 38 ff          CALL_VS         8e0 -> Gef
  5b6:  ba                      QUIT            

Routine 5b8, 3 locals

  5b9:  66 01 02 f6             JIN             L00,L01 [TRUE] 5f1
  5bd:  b2 ...                  PRINT           "jin "
  5c2:  e6 bf 01                PRINT_NUM       L00
  5c5:  b2 ...                  PRINT           " "
  5c8:  e6 bf 02                PRINT_NUM       L01
  5cb:  b2 ...                  PRINT           " => FALSE "
  5da:  a0 03 cd                JZ              L02 [TRUE] 5e8
  5dd:  b3 ...                  PRINT_RET       "(incorrect)"
  5e8:  b3 ...                  PRINT_RET       "(correct)"
  5f1:  b2 ...                  PRINT           "jin "
  5f6:  e6 bf 01                PRINT_NUM       L00
  5f9:  b2 ...                  PRINT           " "
  5fc:  e6 bf 02                PRINT_NUM       L01
  5ff:  b2 ...                  PRINT           " => TRUE "
  60e:  a0 03 cb                JZ              L02 [TRUE] 61a
  611:  b3 ...                  PRINT_RET       "(correct)"
  61a:  b3 ...                  PRINT_RET       "(incorrect)"

Routine 628, 3 locals

  629:  a2 01 03 f1             GET_CHILD       L00 -> L02 [TRUE] 65c
  62d:  b2 ...                  PRINT           "get_child "
  636:  e6 bf 01                PRINT_NUM       L00
  639:  b2 ...                  PRINT           " => "
  642:  e6 bf 03                PRINT_NUM       L02
  645:  a0 02 cd                JZ              L01 [TRUE] 653
  648:  b3 ...                  PRINT_RET       " (incorrect)"
  653:  b3 ...                  PRINT_RET       " (correct)"
  65c:  b2 ...                  PRINT           "get_child "
  665:  e6 bf 01                PRINT_NUM       L00
  668:  b2 ...                  PRINT           " => "
  671:  e6 bf 03                PRINT_NUM       L02
  674:  a0 02 cb                JZ              L01 [TRUE] 680
  677:  b3 ...                  PRINT_RET       " (correct)"
  680:  b3 ...                  PRINT_RET       " (incorrect)"

Routine 68c, 3 locals

  68d:  a3 01 03                GET_PARENT      L00 -> L02
  690:  b2 ...                  PRINT           "get_parent "
  699:  e6 bf 01                PRINT_NUM       L00
  69c:  b2 ...                  PRINT           " => "
  6a5:  e6 bf 03                PRINT_NUM       L02
  6a8:  a0 03 c5                JZ              L02 [TRUE] 6ae
  6ab:  0d 03 01                STORE           L02,#01
  6ae:  61 02 03 4b             JE              L01,L02 [FALSE] 6bb
  6b2:  b3 ...                  PRINT_RET       " (correct)"
  6bb:  b3 ...                  PRINT_RET       " (incorrect)"

Routine 6c8, 3 locals

  6c9:  a1 01 03 f3             GET_SIBLING     L00 -> L02 [TRUE] 6fe
  6cd:  b2 ...                  PRINT           "get_sibling "
  6d8:  e6 bf 01                PRINT_NUM       L00
  6db:  b2 ...                  PRINT           " => "
  6e4:  e6 bf 03                PRINT_NUM       L02
  6e7:  a0 02 cd                JZ              L01 [TRUE] 6f5
  6ea:  b3 ...                  PRINT_RET       " (incorrect)"
  6f5:  b3 ...                  PRINT_RET       " (correct)"
  6fe:  b2 ...                  PRINT           "get_sibling "
  709:  e6 bf 01                PRINT_NUM       L00
  70c:  b2 ...                  PRINT           " => "
  715:  e6 bf 03                PRINT_NUM       L02
  718:  a0 02 cb                JZ              L01 [TRUE] 724
  71b:  b3 ...                  PRINT_RET       " (correct)"
  724:  b3 ...                  PRINT_RET       " (incorrect)"

Routine 730, 4 locals

  731:  72 01 02 04             GET_PROP_ADDR   L00,L01 -> L03
  735:  b2 ...                  PRINT           "get_prop_addr "
  742:  e6 bf 01                PRINT_NUM       L00
  745:  b2 ...                  PRINT           " "
  748:  e6 bf 02                PRINT_NUM       L01
  74b:  b2 ...                  PRINT           " => "
  754:  e6 bf 04                PRINT_NUM       L03
  757:  a0 04 c5                JZ              L03 [TRUE] 75d
  75a:  0d 04 01                STORE           L03,#01
  75d:  61 04 03 4b             JE              L03,L02 [FALSE] 76a
  761:  b3 ...                  PRINT_RET       " (correct)"
  76a:  b3 ...                  PRINT_RET       " (incorrect)"

Routine 778, 4 locals

  779:  71 01 02 04             GET_PROP        L00,L01 -> L03
  77d:  b2 ...                  PRINT           "get_prop "
  786:  e6 bf 01                PRINT_NUM       L00
  789:  b2 ...                  PRINT           " "
  78c:  e6 bf 02                PRINT_NUM       L01
  78f:  b2 ...                  PRINT           " => "
  798:  e6 bf 04                PRINT_NUM       L03
  79b:  a0 04 c5                JZ              L03 [TRUE] 7a1
  79e:  0d 04 01                STORE           L03,#01
  7a1:  61 04 03 4b             JE              L03,L02 [FALSE] 7ae
  7a5:  b3 ...                  PRINT_RET       " (correct)"
  7ae:  b3 ...                  PRINT_RET       " (incorrect)"

Routine 7bc, 2 locals

  7bd:  6c 01 02                CLEAR_ATTR      L00,L01
  7c0:  b2 ...                  PRINT           "clear_attr "
  7c9:  e6 bf 01                PRINT_NUM       L00
  7cc:  b2 ...                  PRINT           " "
  7cf:  e6 bf 02                PRINT_NUM       L01
  7d2:  bb                      NEW_LINE        
  7d3:  b0                      RTRUE           

Routine 7d4, 2 locals

  7d5:  6b 01 02                SET_ATTR        L00,L01
  7d8:  b2 ...                  PRINT           "set_attr "
  7e1:  e6 bf 01                PRINT_NUM       L00
  7e4:  b2 ...                  PRINT           " "
  7e7:  e6 bf 02                PRINT_NUM       L01
  7ea:  bb                      NEW_LINE        
  7eb:  b0                      RTRUE           

Routine 7ec, 3 locals

  7ed:  6a 01 02 fa             TEST_ATTR       L00,L01 [TRUE] 829
  7f1:  b2 ...                  PRINT           "test_attr "
  7fa:  e6 bf 01                PRINT_NUM       L00
  7fd:  b2 ...                  PRINT           " "
  800:  e6 bf 02                PRINT_NUM       L01
  803:  b2 ...                  PRINT           " => FALSE "
  812:  a0 03 cd                JZ              L02 [TRUE] 820
  815:  b3 ...                  PRINT_RET       "(incorrect)"
  820:  b3 ...                  PRINT_RET       "(correct)"
  829:  b2 ...                  PRINT           "test_attr "
  832:  e6 bf 01                PRINT_NUM       L00
  835:  b2 ...                  PRINT           " "
  838:  e6 bf 02                PRINT_NUM       L01
  83b:  b2 ...                  PRINT           " => TRUE "
  84a:  a0 03 cb                JZ              L02 [TRUE] 856
  84d:  b3 ...                  PRINT_RET       "(correct)"
  856:  a0 01 47                JZ              L00 [FALSE] 85e
  859:  8d 02 fe                PRINT_PADDR     S001
  85c:  bb                      NEW_LINE        
  85d:  b0                      RTRUE           
  85e:  b3 ...                  PRINT_RET       "(incorrect)"

Routine 86c, 2 locals

  86d:  6e 01 02                INSERT_OBJ      L00,L01
  870:  b2 ...                  PRINT           "insert_obj "
  879:  e6 bf 01                PRINT_NUM       L00
  87c:  b2 ...                  PRINT           " "
  87f:  e6 bf 02                PRINT_NUM       L01
  882:  bb                      NEW_LINE        
  883:  b0                      RTRUE           

Routine 884, 1 local

  885:  a9 01                   REMOVE_OBJ      L00
  887:  b2 ...                  PRINT           "remove_obj "
  890:  e6 bf 01                PRINT_NUM       L00
  893:  bb                      NEW_LINE        
  894:  b0                      RTRUE           

Routine 898, 4 locals

  899:  73 01 02 04             GET_NEXT_PROP   L00,L01 -> L03
  89d:  b2 ...                  PRINT           "get_next_prop "
  8aa:  e6 bf 01                PRINT_NUM       L00
  8ad:  b2 ...                  PRINT           " "
  8b0:  e6 bf 02                PRINT_NUM       L01
  8b3:  b2 ...                  PRINT           " => "
  8bc:  e6 bf 04                PRINT_NUM       L03
  8bf:  a0 04 c5                JZ              L03 [TRUE] 8c5
  8c2:  0d 04 01                STORE           L03,#01
  8c5:  61 04 03 4b             JE              L03,L02 [FALSE] 8d2
  8c9:  b3 ...                  PRINT_RET       " (correct)"
  8d2:  b3 ...                  PRINT_RET       " (incorrect)"

Routine 8e0, 0 locals

  8e1:  b2 ...                  PRINT           "Strict Z Test
"
  8ee:  8d 03 08                PRINT_PADDR     S002
  8f1:  8d 03 4a                PRINT_PADDR     S003
  8f4:  b2 ...                  PRINT           "Testing jin:

"
  901:  f9 15 01 6e 05 06 00    CALL_VN         5b8 (#05,#06,#00)
  908:  f9 15 01 6e 06 05 01    CALL_VN         5b8 (#06,#05,#01)
  90f:  f9 15 01 6e 00 05 00    CALL_VN         5b8 (#00,#05,#00)
  916:  f9 15 01 6e 00 00 01    CALL_VN         5b8 (#00,#00,#01)
  91d:  b2 ...                  PRINT           "
Press any key.
"
  92c:  cd 4f fc 05 2d          STORE           Gec,#052d
  931:  e2 97 fc 01 00          STOREB          Gec,#01,#00
  936:  e4 9f fc 00 ff          READ            Gec,#00 -> Gef
  93b:  b2 ...                  PRINT           "
Testing get_child:

"
  94e:  f9 17 01 8a 05 01       CALL_VN         628 (#05,#01)
  954:  f9 17 01 8a 07 00       CALL_VN         628 (#07,#00)
  95a:  f9 17 01 8a 00 00       CALL_VN         628 (#00,#00)
  960:  b2 ...                  PRINT           "
Press any key.
"
  96f:  cd 4f fc 05 2d          STORE           Gec,#052d
  974:  e2 97 fc 01 00          STOREB          Gec,#01,#00
  979:  e4 9f fc 00 ff          READ            Gec,#00 -> Gef
  97e:  b2 ...                  PRINT           "
Testing get_parent:

"
  993:  f9 17 01 a3 05 00       CALL_VN         68c (#05,#00)
  999:  f9 17 01 a3 06 01       CALL_VN         68c (#06,#01)
  99f:  f9 17 01 a3 00 00       CALL_VN         68c (#00,#00)
  9a5:  b2 ...                  PRINT           "
Press any key.
"
  9b4:  cd 4f fc 05 2d          STORE           Gec,#052d
  9b9:  e2 97 fc 01 00          STOREB          Gec,#01,#00
  9be:  e4 9f fc 00 ff          READ            Gec,#00 -> Gef
  9c3:  b2 ...                  PRINT           "
Testing get_sibling:

"
  9d8:  f9 17 01 b2 05 00       CALL_VN         6c8 (#05,#00)
  9de:  f9 17 01 b2 06 01       CALL_VN         6c8 (#06,#01)
  9e4:  f9 17 01 b2 00 00       CALL_VN         6c8 (#00,#00)
  9ea:  b2 ...                  PRINT           "
Press any key.
"
  9f9:  cd 4f fc 05 2d          STORE           Gec,#052d
  9fe:  e2 97 fc 01 00          STOREB          Gec,#01,#00
  a03:  e4 9f fc 00 ff          READ            Gec,#00 -> Gef
  a08:  b2 ...                  PRINT           "
Testing get_prop_addr:

"
  a1f:  f9 15 01 cc 05 04 01    CALL_VN         730 (#05,#04,#01)
  a26:  f9 15 01 cc 07 04 00    CALL_VN         730 (#07,#04,#00)
  a2d:  f9 15 01 cc 00 04 00    CALL_VN         730 (#00,#04,#00)
  a34:  b2 ...                  PRINT           "
Press any key.
"
  a43:  cd 4f fc 05 2d          STORE           Gec,#052d
  a48:  e2 97 fc 01 00          STOREB          Gec,#01,#00
  a4d:  e4 9f fc 00 ff          READ            Gec,#00 -> Gef
  a52:  b2 ...                  PRINT           "
Testing get_prop:

"
  a65:  f9 15 01 de 05 04 01    CALL_VN         778 (#05,#04,#01)
  a6c:  f9 15 01 de 06 04 00    CALL_VN         778 (#06,#04,#00)
  a73:  f9 15 01 de 00 04 00    CALL_VN         778 (#00,#04,#00)
  a7a:  b2 ...                  PRINT           "
Press any key.
"
  a89:  cd 4f fc 05 2d          STORE           Gec,#052d
  a8e:  e2 97 fc 01 00          STOREB          Gec,#01,#00
  a93:  e4 9f fc 00 ff          READ            Gec,#00 -> Gef
  a98:  b2 ...                  PRINT           "
Testing clear_attr:

"
  aad:  f9 17 01 ef 05 00       CALL_VN         7bc (#05,#00)
  ab3:  f9 17 01 ef 05 01       CALL_VN         7bc (#05,#01)
  ab9:  f9 17 01 ef 00 00       CALL_VN         7bc (#00,#00)
  abf:  f9 17 01 ef 00 01       CALL_VN         7bc (#00,#01)
  ac5:  b2 ...                  PRINT           "
Testing set_attr:

"
  ad8:  f9 17 01 f5 05 00       CALL_VN         7d4 (#05,#00)
  ade:  f9 17 01 f5 05 01       CALL_VN         7d4 (#05,#01)
  ae4:  f9 17 01 f5 00 00       CALL_VN         7d4 (#00,#00)
  aea:  8d 03 88                PRINT_PADDR     S004
  aed:  e6 7f 00                PRINT_NUM       #00
  af0:  8d 03 93                PRINT_PADDR     S005
  af3:  b2 ...                  PRINT           "
Testing test_attr:

"
  b06:  f9 15 01 fb 05 00 01    CALL_VN         7ec (#05,#00,#01)
  b0d:  f9 15 01 fb 05 01 01    CALL_VN         7ec (#05,#01,#01)
  b14:  f9 15 01 fb 06 00 00    CALL_VN         7ec (#06,#00,#00)
  b1b:  f9 15 01 fb 06 01 00    CALL_VN         7ec (#06,#01,#00)
  b22:  f9 15 01 fb 00 00 00    CALL_VN         7ec (#00,#00,#00)
  b29:  f9 15 01 fb 00 01 00    CALL_VN         7ec (#00,#01,#00)
  b30:  b2 ...                  PRINT           "
Press any key.
"
  b3f:  cd 4f fc 05 2d          STORE           Gec,#052d
  b44:  e2 97 fc 01 00          STOREB          Gec,#01,#00
  b49:  e4 9f fc 00 ff          READ            Gec,#00 -> Gef
  b4e:  b2 ...                  PRINT           "
Testing insert_obj:

"
  b63:  f9 17 02 1b 07 05       CALL_VN         86c (#07,#05)
  b69:  f9 17 02 1b 00 05       CALL_VN         86c (#00,#05)
  b6f:  f9 17 02 1b 05 00       CALL_VN         86c (#05,#00)
  b75:  f9 17 02 1b 00 00       CALL_VN         86c (#00,#00)
  b7b:  b2 ...                  PRINT           "
Testing remove_obj:

"
  b90:  da 1f 02 21 07          CALL_2N         884 (#07)
  b95:  da 1f 02 21 00          CALL_2N         884 (#00)
  b9a:  b2 ...                  PRINT           "
Testing get_next_prop:

"
  bb1:  f9 15 02 26 05 05 01    CALL_VN         898 (#05,#05,#01)
  bb8:  f9 15 02 26 06 04 00    CALL_VN         898 (#06,#04,#00)
  bbf:  f9 15 02 26 00 04 00    CALL_VN         898 (#00,#04,#00)
  bc6:  b2 ...                  PRINT           "
Test completed!
"
  bd5:  b2 ...                  PRINT           "
Press any key.
"
  be4:  cd 4f fc 05 2d          STORE           Gec,#052d
  be9:  e2 97 fc 01 00          STOREB          Gec,#01,#00
  bee:  e4 9f fc 00 ff          READ            Gec,#00 -> Gef
  bf3:  b0                      RTRUE           

Routine bf4, 2 locals

  bf5:  b1                      RFALSE          

[End of code at bf6]

[Start of text at bf8]

  bf8: S001 "(incorrect; shouldn't set attributes in object 0)"
  c20: S002 "
According to the Z-Machine Standards Document, "objects are numbered
consecucutively from 1 upward, with object number 0 being used to mean
"nothing" (though there is formally no such object)." Hence, it seems
reasonable that operations on object number 0 should either fail or, if that is
not an option, do nothing. These tests are written with that assumption.
"
  d28: S003 "
Please note that whenever a test is flagged as "correct", that only means that
an instruction returned zero or non-zero (or branched / didn't branch) when it
was supposed to. Not that it necessarily returned the correct value. If no
result is written the result was not tested, and the test was only included to
test the stability of the interpreter.
"
  e20: S004 "
(Note: An attempt has been made to set attribute number "
  e4c: S005 " in object number 0. If the test_attr test below indicates that
this attribute has been set, the interpreter did not ignore the instruction as
it should have done.)
"
  ec0: S006 "<unknown attribute>"
  ed4: S007 "name"
  ed8: S008 "create"
  edc: S009 "recreate"
  ee4: S010 "destroy"
  eec: S011 "remaining"
  ef4: S012 "copy"
  ef8: S013 "call"
  efc: S014 "print"
  f00: S015 "print_to_array"
  f0c: S016 "prop1"
  f10: S017 "prop2"
  f14: S018 "attr1"
  f18: S019 "attr2"
  f1c: S020 "buffer"

[End of text at f20]

[End of file]
