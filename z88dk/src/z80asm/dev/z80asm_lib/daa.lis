1     0000              ;------------------------------------------------------------------------------
2     0000              ; Z88DK Z80 Macro Assembler
3     0000              ;
4     0000              ; DAA emulation for Rabbit - based on the Fuse implementation
5     0000              ;
6     0000              ; Copyright (C) Paulo Custodio, 2011-2017
7     0000              ; License: The Artistic License 2.0, http://www.perlfoundation.org/artistic_license_2_0
8     0000              ; Repository: https://github.com/z88dk/z88dk
9     0000              ;------------------------------------------------------------------------------
10    0000              
11    0000              
12    0000              IF __CPU_RABBIT__
13    0000                    SECTION  code_crt0_sccz80
14    0000                    PUBLIC   __z80asm__daa
15    0000              
16    0000              __z80asm__daa:
17    0000                    push  bc
18    0000                    push  af
19    0000                    ex    (sp), hl          ; H is A, L is F
20    0000              
21    0000              ; libspectrum_byte add = 0, carry = ( F & FLAG_C );
22    0000                    ld    bc, 0             ; B = add
23    0000                    rl    c                 ; C = 1 if carry, 0 otherwise
24    0000              
25    0000              ; if( ( F & FLAG_H ) || ( ( A & 0x0f ) > 9 ) ) add = 6;
26    0000                    bit   4, l              ; check H
27    0000                    jr    nz, t1_true
28    0000              
29    0000                    ld    a, h
30    0000                    and   $0F
31    0000                    cp    9+1               ; A >= 10 -> no carry
32    0000                    jr    c, t1_cont
33    0000              
34    0000              t1_true:
35    0000                    ld    b, 6              ; add = 6
36    0000              
37    0000              t1_cont:
38    0000              
39    0000              ; if( carry || ( A > 0x99 ) ) add |= 0x60;
40    0000                    bit   0, c              ; check carry
41    0000                    jr    nz, t2_true
42    0000              
43    0000                    ld    a, h
44    0000                    cp    0x99+1
45    0000                    jr    c, t2_cont
46    0000              
47    0000              t2_true:
48    0000                    ld    a, 0x60
49    0000                    or    b
50    0000                    ld    b, a
51    0000              
52    0000              t2_cont:
53    0000              
54    0000              ; if( A > 0x99 ) carry = FLAG_C;
55    0000                    ld    a, h
56    0000                    cp    0x99+1
57    0000                    jr    c, t3_cont
58    0000              
59    0000              t3_true:
60    0000                    set   0, c              ; store carry=1 in C
61    0000              
62    0000              t3_cont:
63    0000              
64    0000              ; if( F & FLAG_N ) { SUB(add); } else { ADD(add); }
65    0000                    bit   1, l              ; check N
66    0000              
67    0000                    ld    a, h              ; prepare to add/subtract
68    0000                    jr    z, t4_zero
69    0000              
70    0000              t4_one:
71    0000                    sub   b
72    0000                    jr    t4_cont
73    0000              
74    0000              t4_zero:
75    0000                    add   a, b
76    0000              
77    0000              t4_cont:
78    0000                    ld    h, a
79    0000              
80    0000              ; F = ( F & ~( FLAG_C | FLAG_P ) ) | carry | parity_table[A];
81    0000                    ld    a, l
82    0000                    and   ~$01              ; clear C
83    0000                    or    $04               ; set P/V (even = 1, odd = 0)
84    0000                    or    c                 ; | carry
85    0000                    ld    l, a
86    0000              
87    0000                    ld    b, $80
88    0000              parity_loop:
89    0000                    ld    a, h
90    0000                    and   b                 ; check each bit
91    0000                    jr    z, bit0
92    0000              
93    0000                    ld    a, l
94    0000                    xor   $04               ; invert parity bit
95    0000                    ld    l, a
96    0000              bit0:
97    0000                    rr    b
98    0000                    jr    nc, parity_loop
99    0000              
100   0000              ; set zero flag
101   0000                    ld    a, h
102   0000                    and   a
103   0000                    jr    nz, not_z
104   0000              
105   0000                    set   6, l              ; set Z flag
106   0000              not_z:
107   0000              
108   0000              ; set sign flag
109   0000                    bit   7, h
110   0000                    jr    z, positive
111   0000              
112   0000                    set   7, l              ; set S flag
113   0000              positive:
114   0000              
115   0000              ; return
116   0000                    ex    (sp), hl
117   0000                    pop   af
118   0000                    pop   bc
119   0000                    ret
120   0000              ENDIF
121   0000              
