diff -wu Z80.orig/Codes.h Z80/Codes.h
--- Z80.orig/Codes.h	2007-05-22 08:59:32.000000000 +0100
+++ Z80/Codes.h	2009-11-06 10:13:56.000000000 +0000
@@ -34,6 +34,7 @@
 case RET_PE:  if(R->AF.B.l&P_FLAG)    { R->ICount-=6;M_RET; } break;
 case RET_M:   if(R->AF.B.l&S_FLAG)    { R->ICount-=6;M_RET; } break;
 
+#ifndef RCMX000
 case CALL_NZ: if(R->AF.B.l&Z_FLAG) R->PC.W+=2; else { R->ICount-=7;M_CALL; } break;
 case CALL_NC: if(R->AF.B.l&C_FLAG) R->PC.W+=2; else { R->ICount-=7;M_CALL; } break;
 case CALL_PO: if(R->AF.B.l&P_FLAG) R->PC.W+=2; else { R->ICount-=7;M_CALL; } break;
@@ -42,6 +43,7 @@
 case CALL_C:  if(R->AF.B.l&C_FLAG) { R->ICount-=7;M_CALL; } else R->PC.W+=2; break;
 case CALL_PE: if(R->AF.B.l&P_FLAG) { R->ICount-=7;M_CALL; } else R->PC.W+=2; break;
 case CALL_M:  if(R->AF.B.l&S_FLAG) { R->ICount-=7;M_CALL; } else R->PC.W+=2; break;
+#endif
 
 case ADD_B:    M_ADD(R->BC.B.h);break;
 case ADD_C:    M_ADD(R->BC.B.l);break;
@@ -187,13 +189,17 @@
   R->AF.B.l=(R->AF.B.l&~(C_FLAG|N_FLAG|H_FLAG))|I;
   break;
 
+#ifndef RCMX000
 case RST00:    M_RST(0x0000);break;
 case RST08:    M_RST(0x0008);break;
+#endif
 case RST10:    M_RST(0x0010);break;
 case RST18:    M_RST(0x0018);break;
 case RST20:    M_RST(0x0020);break;
 case RST28:    M_RST(0x0028);break;
+#ifndef RCMX000
 case RST30:    M_RST(0x0030);break;
+#endif
 case RST38:    M_RST(0x0038);break;
 
 case PUSH_BC:  M_PUSH(BC);break;
@@ -214,6 +220,11 @@
 case SCF:  S(C_FLAG);R(N_FLAG|H_FLAG);break;
 case CPL:  R->AF.B.h=~R->AF.B.h;S(N_FLAG|H_FLAG);break;
 case NOP:  break;
+
+#ifdef RCMX000
+ case IOI: ioi_flag=1; break;
+ case IOE: ioe_flag=1; break;
+#else
 case OUTA: I=OpZ80(R->PC.W++);OutZ80(I|(R->AF.W&0xFF00),R->AF.B.h);break;
 case INA:  I=OpZ80(R->PC.W++);R->AF.B.h=InZ80(I|(R->AF.W&0xFF00));break;
 
@@ -238,6 +249,8 @@
   }
   break;
 
+#endif
+
 case CCF:
   R->AF.B.l^=C_FLAG;R(N_FLAG|H_FLAG);
   R->AF.B.l|=R->AF.B.l&C_FLAG? 0:H_FLAG;
@@ -361,6 +374,7 @@
   WrZ80(J.W,R->AF.B.h);
   break;
 
+#ifndef RCMX000
 case EX_HL_xSP:
   J.B.l=RdZ80(R->SP.W);WrZ80(R->SP.W++,R->HL.B.l);
   J.B.h=RdZ80(R->SP.W);WrZ80(R->SP.W--,R->HL.B.h);
@@ -374,6 +388,7 @@
   if(R->AF.B.l&N_FLAG) J.W|=1024;
   R->AF.W=DAATable[J.W];
   break;
+#endif
 
 default:
   if(R->TrapBadOps)
diff -wu Z80.orig/CodesED.h Z80/CodesED.h
--- Z80.orig/CodesED.h	2007-07-04 17:04:26.000000000 +0100
+++ Z80/CodesED.h	2009-11-06 10:13:56.000000000 +0000
@@ -75,6 +75,7 @@
   R->SP.B.h=RdZ80(J.W);
   break;
 
+#ifndef RCMX000
 case RRD:
   I=RdZ80(R->HL.W);
   J.B.l=(I>>4)|(R->AF.B.h<<4);
@@ -89,6 +90,7 @@
   R->AF.B.h=(I>>4)|(R->AF.B.h&0xF0);
   R->AF.B.l=PZSTable[R->AF.B.h]|(R->AF.B.l&C_FLAG);
   break;
+#endif
 
 case LD_A_I:
   R->AF.B.h=R->I;
@@ -104,6 +106,7 @@
 case LD_I_A:   R->I=R->AF.B.h;break;
 case LD_R_A:   break;
 
+#ifndef RCMX000
 case IM_0:     R->IFF&=~(IFF_IM1|IFF_IM2);break;
 case IM_1:     R->IFF=(R->IFF&~IFF_IM2)|IFF_IM1;break;
 case IM_2:     R->IFF=(R->IFF&~IFF_IM1)|IFF_IM2;break;
@@ -111,9 +114,11 @@
 case RETI:
 case RETN:     if(R->IFF&IFF_2) R->IFF|=IFF_1; else R->IFF&=~IFF_1;
                M_RET;break;
+#endif
 
 case NEG:      I=R->AF.B.h;R->AF.B.h=0;M_SUB(I);break;
 
+#ifndef RCMX000
 case IN_B_xC:  M_IN(R->BC.B.h);break;
 case IN_C_xC:  M_IN(R->BC.B.l);break;
 case IN_D_xC:  M_IN(R->DE.B.h);break;
@@ -220,6 +225,7 @@
     R->ICount+=5;
   }
   break;
+#endif
 
 case LDI:
   WrZ80(R->DE.W++,RdZ80(R->HL.W++));
@@ -257,6 +263,7 @@
   else R->ICount+=5;
   break;
 
+#ifndef RCMX000
 case CPI:
   I=RdZ80(R->HL.W++);
   J.B.l=R->AF.B.h-I;
@@ -302,3 +309,12 @@
     ((R->AF.B.h^I^J.B.l)&H_FLAG)|(R->BC.W? P_FLAG:0);
   if(R->BC.W&&J.B.l) R->PC.W-=2; else R->ICount+=5;
   break;
+#endif
+
+/** This is rabbits opcode for EX (sp),hl */
+#ifdef RCMX000
+case EX_HL_SPx:
+  J.B.l=RdZ80(R->SP.W);WrZ80(R->SP.W++,R->HL.B.l);
+  J.B.h=RdZ80(R->SP.W);WrZ80(R->SP.W--,R->HL.B.h);
+  R->HL.W=J.W;
+#endif
diff -wu Z80.orig/CodesXX.h Z80/CodesXX.h
--- Z80.orig/CodesXX.h	2007-05-22 09:01:02.000000000 +0100
+++ Z80/CodesXX.h	2009-11-06 10:13:56.000000000 +0000
@@ -226,8 +226,11 @@
 case SCF:  S(C_FLAG);R(N_FLAG|H_FLAG);break;
 case CPL:  R->AF.B.h=~R->AF.B.h;S(N_FLAG|H_FLAG);break;
 case NOP:  break;
+
+#ifndef RCMX000
 case OUTA: I=OpZ80(R->PC.W++);OutZ80(I|(R->AF.W&0xFF00),R->AF.B.h);break;
 case INA:  I=OpZ80(R->PC.W++);R->AF.B.h=InZ80(I|(R->AF.W&0xFF00));break;
+#endif
 
 case HALT:
   R->PC.W--;
diff -wu Z80.orig/ConDebug.c Z80/ConDebug.c
--- Z80.orig/ConDebug.c	2007-02-16 15:50:22.000000000 +0000
+++ Z80/ConDebug.c	2009-11-06 10:13:56.000000000 +0000
@@ -131,9 +131,9 @@
           CONSetColor(CLR_TEXT,CLR_BACK);
           sprintf(S,
             "%02X %02X %02X %02X %c%c%c%c",
-            RdZ80(A),RdZ80(A+1),RdZ80(A+2),RdZ80(A+3),
-            ChrDump(RdZ80(A)),ChrDump(RdZ80(A+1)),
-            ChrDump(RdZ80(A+2)),ChrDump(RdZ80(A+3))
+            RdZ80Dbg(A),RdZ80Dbg(A+1),RdZ80Dbg(A+2),RdZ80Dbg(A+3),
+            ChrDump(RdZ80Dbg(A)),ChrDump(RdZ80Dbg(A+1)),
+            ChrDump(RdZ80Dbg(A+2)),ChrDump(RdZ80Dbg(A+3))
           );
           CONPrint(X+7,Y+J+2,S);
         }
diff -wu Z80.orig/Debug.c Z80/Debug.c
--- Z80.orig/Debug.c	2007-01-08 17:32:00.000000000 +0000
+++ Z80/Debug.c	2009-11-06 10:13:56.000000000 +0000
@@ -253,27 +253,27 @@
   C='\0';
   J=0;
 
-  switch(RdZ80(B))
+  switch(RdZ80Dbg(B))
   {
-    case 0xCB: B++;T=MnemonicsCB[RdZ80(B++)];break;
-    case 0xED: B++;T=MnemonicsED[RdZ80(B++)];break;
+    case 0xCB: B++;T=MnemonicsCB[RdZ80Dbg(B++)];break;
+    case 0xED: B++;T=MnemonicsED[RdZ80Dbg(B++)];break;
     case 0xDD: B++;C='X';
-               if(RdZ80(B)!=0xCB) T=MnemonicsXX[RdZ80(B++)];
+               if(RdZ80Dbg(B)!=0xCB) T=MnemonicsXX[RdZ80Dbg(B++)];
                else
-               { B++;Offset=RdZ80(B++);J=1;T=MnemonicsXCB[RdZ80(B++)]; }
+               { B++;Offset=RdZ80Dbg(B++);J=1;T=MnemonicsXCB[RdZ80Dbg(B++)]; }
                break;
     case 0xFD: B++;C='Y';
-               if(RdZ80(B)!=0xCB) T=MnemonicsXX[RdZ80(B++)];
+               if(RdZ80Dbg(B)!=0xCB) T=MnemonicsXX[RdZ80Dbg(B++)];
                else
-               { B++;Offset=RdZ80(B++);J=1;T=MnemonicsXCB[RdZ80(B++)]; }
+               { B++;Offset=RdZ80Dbg(B++);J=1;T=MnemonicsXCB[RdZ80Dbg(B++)]; }
                break;
-    default:   T=Mnemonics[RdZ80(B++)];
+    default:   T=Mnemonics[RdZ80Dbg(B++)];
   }
 
   if(P=strchr(T,'^'))
   {
     strncpy(R,T,P-T);R[P-T]='\0';
-    sprintf(H,"%02X",RdZ80(B++));
+    sprintf(H,"%02X",RdZ80Dbg(B++));
     strcat(R,H);strcat(R,P+1);
   }
   else strcpy(R,T);
@@ -282,14 +282,14 @@
   if(P=strchr(R,'*'))
   {
     strncpy(S,R,P-R);S[P-R]='\0';
-    sprintf(H,"%02X",RdZ80(B++));
+    sprintf(H,"%02X",RdZ80Dbg(B++));
     strcat(S,H);strcat(S,P+1);
   }
   else
     if(P=strchr(R,'@'))
     {
       strncpy(S,R,P-R);S[P-R]='\0';
-      if(!J) Offset=RdZ80(B++);
+      if(!J) Offset=RdZ80Dbg(B++);
       strcat(S,Offset&0x80? "-":"+");
       J=Offset&0x80? 256-Offset:Offset;
       sprintf(H,"%02X",J);
@@ -299,7 +299,7 @@
       if(P=strchr(R,'#'))
       {
         strncpy(S,R,P-R);S[P-R]='\0';
-        sprintf(H,"%04X",RdZ80(B)+256*RdZ80(B+1));
+        sprintf(H,"%04X",RdZ80Dbg(B)+256*RdZ80Dbg(B+1));
         strcat(S,H);strcat(S,P+1);
         B+=2;
       }
@@ -331,7 +331,7 @@
   printf
   ( 
     "AT PC: [%02X - %s]   AT SP: [%04X]   FLAGS: [%s]   %s: %s\n\n",
-    RdZ80(R->PC.W),S,RdZ80(R->SP.W)+RdZ80(R->SP.W+1)*256,T,
+    RdZ80Dbg(R->PC.W),S,RdZ80Dbg(R->SP.W)+RdZ80Dbg(R->SP.W+1)*256,T,
     R->IFF&0x04? "IM2":R->IFF&0x02? "IM1":"IM0",
     R->IFF&0x01? "EI":"DI"
   );
@@ -389,10 +389,10 @@
           {
             printf("%04X: ",Addr);
             for(I=0;I<16;I++,Addr++)
-              printf("%02X ",RdZ80(Addr));
+              printf("%02X ",RdZ80Dbg(Addr));
             printf(" | ");Addr-=16;
             for(I=0;I<16;I++,Addr++)
-              putchar(isprint(RdZ80(Addr))? RdZ80(Addr):'.');
+              putchar(isprint(RdZ80Dbg(Addr))? RdZ80Dbg(Addr):'.');
             puts("");
           }
         }
diff -wu Z80.orig/Z80.c Z80/Z80.c
--- Z80.orig/Z80.c	2007-07-25 10:03:52.000000000 +0100
+++ Z80/Z80.c	2009-11-06 10:13:56.000000000 +0000
@@ -22,9 +22,9 @@
 /** __inline for the same purpose.                          **/
 /*************************************************************/
 #ifdef __C99__
-#define INLINE static inline
+#define INLINE inline
 #else
-#define INLINE static __inline
+#define INLINE __inline
 #endif
 
 /** System-Dependent Stuff ***********************************/
@@ -45,6 +45,75 @@
 INLINE void WrZ80(word A,byte V) { if(Page[A>>13]<ROM) Page[A>>13][A&0x1FFF]=V; }
 #endif
 
+#ifdef Z88DK
+extern byte RAM[65536];
+
+INLINE byte RdZ80Dbg(word A) { return(RAM[A]); }
+INLINE void WrZ80Dbg(word A, byte V) { RAM[A] = V; }
+
+
+#ifndef RCMX000
+
+/** If we don't have the rabbit I/O handler we don't need 
+    to separate Debug readings from real (cpu) memory reading
+*/
+INLINE byte RdZ80(word A) { return(RAM[A]); }
+INLINE void WrZ80(word A, byte V) { RAM[A] = V; }
+
+
+ 
+ 
+
+#else
+
+/** This is set by the ioi instruction so following mem access goes to io instead */
+static int ioi_flag=0;
+static int ioe_flag=0;
+
+
+/** This is a read, either from I/O or memory */
+INLINE byte RdZ80(word A)
+{
+  if (ioi_flag || ioe_flag)
+    {
+      if (ioi_flag)
+	{
+	  ioi_flag=0;
+	  return rcmx_io_internal_in(A);
+	}
+      if (ioe_flag)
+	{
+	  ioe_flag=0;
+	  return rcmx_io_external_in(A);
+	}
+    }
+  return(RAM[A]); 
+}
+
+/** This is a write, either to I/O or memory */
+INLINE void WrZ80(word A, byte V)
+{
+  if (ioi_flag || ioe_flag)
+    {
+      if (ioi_flag)
+	{
+	  ioi_flag=0;
+	  rcmx_io_internal_out(A, V);
+	}
+      if (ioe_flag)
+	{
+	  ioe_flag=0;
+	  rcmx_io_external_out(A, V);
+	}
+      return;
+    }
+  RAM[A] = V;
+}
+
+#endif
+
+#endif
+
 #ifdef MG
 #define RdZ80 RDZ80
 extern byte *Page[];
@@ -62,7 +131,20 @@
 /** the functions of OpZ80().                               **/
 /*************************************************************/
 #ifndef FAST_RDOP
+#ifdef RCMX000
+
+/** We need this in order to not reset the ioi / ioe flags
+ *  when fetching instructions
+ */
+byte OpZ80(word A) {
+  return RAM[A]; 
+}
+
+#else
+
 #define OpZ80(A) RdZ80(A)
+
+#endif
 #endif
 
 #define S(Fl)        R->AF.B.l|=Fl
@@ -247,8 +329,22 @@
   CP_B,CP_C,CP_D,CP_E,CP_H,CP_L,CP_xHL,CP_A,
   RET_NZ,POP_BC,JP_NZ,JP,CALL_NZ,PUSH_BC,ADD_BYTE,RST00,
   RET_Z,RET,JP_Z,PFX_CB,CALL_Z,CALL,ADC_BYTE,RST08,
-  RET_NC,POP_DE,JP_NC,OUTA,CALL_NC,PUSH_DE,SUB_BYTE,RST10,
-  RET_C,EXX,JP_C,INA,CALL_C,PFX_DD,SBC_BYTE,RST18,
+
+  RET_NC,POP_DE,JP_NC,
+#ifdef RCMX000
+  IOI,
+#else
+  OUTA,
+#endif
+  CALL_NC,PUSH_DE,SUB_BYTE,RST10,
+
+  RET_C,EXX,JP_C,
+#ifdef RCMX000
+  IOE,
+#else
+  INA,  
+#endif
+  CALL_C,PFX_DD,SBC_BYTE,RST18,
   RET_PO,POP_HL,JP_PO,EX_HL_xSP,CALL_PO,PUSH_HL,AND_BYTE,RST20,
   RET_PE,LD_PC_HL,JP_PE,EX_DE_HL,CALL_PE,PFX_ED,XOR_BYTE,RST28,
   RET_P,POP_AF,JP_P,DI,CALL_P,PUSH_AF,OR_BYTE,RST30,
@@ -303,7 +399,13 @@
   DB_38,DB_39,DB_3A,DB_3B,DB_3C,DB_3D,DB_3E,DB_3F,
   IN_B_xC,OUT_xC_B,SBC_HL_BC,LD_xWORDe_BC,NEG,RETN,IM_0,LD_I_A,
   IN_C_xC,OUT_xC_C,ADC_HL_BC,LD_BC_xWORDe,DB_4C,RETI,DB_,LD_R_A,
-  IN_D_xC,OUT_xC_D,SBC_HL_DE,LD_xWORDe_DE,DB_54,DB_55,IM_1,LD_A_I,
+  IN_D_xC,OUT_xC_D,SBC_HL_DE,LD_xWORDe_DE,
+#ifdef RCMX000
+  EX_HL_SPx,
+#else
+  DB_54,
+#endif
+  DB_55,IM_1,LD_A_I,
   IN_E_xC,OUT_xC_E,ADC_HL_DE,LD_DE_xWORDe,DB_5C,DB_5D,IM_2,LD_A_R,
   IN_H_xC,OUT_xC_H,SBC_HL_HL,LD_xWORDe_HL,DB_64,DB_65,DB_66,RRD,
   IN_L_xC,OUT_xC_L,ADC_HL_HL,LD_HL_xWORDe,DB_6C,DB_6D,DB_6E,RLD,
@@ -494,6 +596,13 @@
   R->IBackup  = 0;
 
   JumpZ80(R->PC.W);
+
+#ifdef RCMX000
+  ioi_flag=0;
+  ioe_flag=0;
+  
+#endif
+
 }
 
 /** ExecZ80() ************************************************/
@@ -614,18 +723,18 @@
   }
 }
 
-/** RunZ80() *************************************************/
-/** This function will run Z80 code until an LoopZ80() call **/
-/** returns INT_QUIT. It will return the PC at which        **/
-/** emulation stopped, and current register values in R.    **/
-/*************************************************************/
 #ifndef EXECZ80
-word RunZ80(Z80 *R)
+/**
+ *  This function will execute num_instr instructions on the Z80 then return
+ */
+word InstrZ80(Z80 *R, int num_instr)
 {
   register byte I;
   register pair J;
 
-  for(;;)
+  int n;
+
+  for(n=1;n<=num_instr;n++)
   {
 #ifdef DEBUG
     /* Turn tracing on when reached trap address */
@@ -678,6 +787,41 @@
     }
   }
 
+#ifdef RCMX000
+  if (I==IOI || I==IOE)
+    {
+      /** The ioi/ioe and the following "memory" instruction is to be regarded as one 
+       *  instruction
+       */
+      InstrZ80(R, 1);
+    }
+#endif
+
+  /* Execution stopped */
+  return(R->PC.W);
+}
+
+/** RunZ80() *************************************************/
+/** This function will run Z80 code until an LoopZ80() call **/
+/** returns INT_QUIT. It will return the PC at which        **/
+/** emulation stopped, and current register values in R.    **/
+/*************************************************************/
+word RunZ80(Z80 *R)
+{
+  register byte I;
+  register pair J;
+
+#ifdef RCMX000
+
+  rcmx_io_init();
+
+#endif
+
+  for(;;)
+  {
+    InstrZ80(R,1);
+  }
+
   /* Execution stopped */
   return(R->PC.W);
 }
diff -wu Z80.orig/Z80.h Z80/Z80.h
--- Z80.orig/Z80.h	2007-07-28 23:55:44.000000000 +0100
+++ Z80/Z80.h	2009-11-06 10:13:56.000000000 +0000
@@ -119,6 +119,13 @@
 /*************************************************************/
 void IntZ80(register Z80 *R,register word Vector);
 
+/** InstrZ80
+ *  This function will execute num_instr instructions on the Z80 then return PC
+ */
+#ifndef EXECZ80
+word InstrZ80(Z80 *R, int num_instr);
+#endif
+
 /** RunZ80() *************************************************/
 /** This function will run Z80 code until an LoopZ80() call **/
 /** returns INT_QUIT. It will return the PC at which        **/
@@ -128,6 +135,14 @@
 word RunZ80(register Z80 *R);
 #endif
 
+/** RdZ80Dbg()/WrZ80Dbg() ************************************/
+/** These functions are called when access to RAM outside   **/
+/** the actual processor accesses, such as debug, memory    **/
+/** dump etc.                                               **/
+/************************************ TO BE WRITTEN BY USER **/
+void WrZ80Dbg(register word Addr,register byte Value);
+byte RdZ80Dbg(register word Addr);
+
 /** RdZ80()/WrZ80() ******************************************/
 /** These functions are called when access to RAM occurs.   **/
 /** They allow to control memory access.                    **/
