
// automatically generated by m4 from headers in proto subdir


#ifndef __ADT_WV_PRIORITY_QUEUE_H__
#define __ADT_WV_PRIORITY_QUEUE_H__

#include <stddef.h>

// DATA STRUCTURES

typedef struct wv_priority_queue_s
{

   void       *compar;
   void       *data;
   size_t      size;
   size_t      capacity;
   size_t      max_size;

} wv_priority_queue_t;

extern size_t wv_priority_queue_capacity(wv_priority_queue_t *q);


extern void wv_priority_queue_clear(wv_priority_queue_t *q);


extern void *wv_priority_queue_data(wv_priority_queue_t *q);


extern void wv_priority_queue_destroy(wv_priority_queue_t *q);


extern int wv_priority_queue_empty(wv_priority_queue_t *q);


extern wv_priority_queue_t *wv_priority_queue_init(void *p,size_t capacity,size_t max_size,void *compar);


extern size_t wv_priority_queue_max_size(wv_priority_queue_t *q);


extern void *wv_priority_queue_pop(wv_priority_queue_t *q);


extern int wv_priority_queue_push(wv_priority_queue_t *q,void *item);


extern int wv_priority_queue_reserve(wv_priority_queue_t *q,size_t n);


extern int wv_priority_queue_resize(wv_priority_queue_t *q,size_t n);


extern int wv_priority_queue_shrink_to_fit(wv_priority_queue_t *q);


extern size_t wv_priority_queue_size(wv_priority_queue_t *q);


extern void *wv_priority_queue_top(wv_priority_queue_t *q);



#endif
