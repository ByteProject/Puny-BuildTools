
// automatically generated by m4 from headers in proto subdir


#ifndef __ADT_W_ARRAY_H__
#define __ADT_W_ARRAY_H__

#include <stddef.h>

// DATA STRUCTURES

typedef struct w_array_s
{

   void       *data;
   size_t      size;
   size_t      capacity;

} w_array_t;

extern size_t w_array_append(w_array_t *a,void *item);


extern size_t w_array_append_n(w_array_t *a,size_t n,void *item);


extern void *w_array_at(w_array_t *a,size_t idx);


extern void *w_array_back(w_array_t *a);


extern size_t w_array_capacity(w_array_t *a);


extern void w_array_clear(w_array_t *a);


extern void *w_array_data(w_array_t *a);


extern void w_array_destroy(w_array_t *a);


extern int w_array_empty(w_array_t *a);


extern size_t w_array_erase(w_array_t *a,size_t idx);


extern size_t w_array_erase_range(w_array_t *a,size_t idx_first,size_t idx_last);


extern void *w_array_front(w_array_t *a);


extern w_array_t *w_array_init(void *p,void *data,size_t capacity);


extern size_t w_array_insert(w_array_t *a,size_t idx,void *item);


extern size_t w_array_insert_n(w_array_t *a,size_t idx,size_t n,void *item);


extern void *w_array_pop_back(w_array_t *a);


extern size_t w_array_push_back(w_array_t *a,void *item);


extern int w_array_resize(w_array_t *a,size_t n);


extern size_t w_array_size(w_array_t *a);



#endif
