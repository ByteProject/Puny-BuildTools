; Optimisation file for inlining some very common sccz80 operations
; Inlines a couple of common operations
; l_gint rule saves 27T at the cost of 1 byte
; l_pint rule saves 27T at cost of 2 bytes
; l_sxt rule saves 27T at the cost of 1 byte
; l_sub rule saves 27T at a cost of 1 bytes
=
;

	call	l_gint	;
=
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a

	call	l_pint
=
	ex	de,hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ex	de,hl

	call	l_sxt
=
	ld	l,a
	rla
	sbc	a
	ld	h,a

	call	l_sub
=
	ex	de,hl
	and	a
	sbc	hl,de

	call	l_glong		;ignore
	call	l_long_and
=
	pop	de
	ld	a,(hl)
	and	e	
	ld	e,a
	inc	hl
	ld	a,(hl)
	and	d
	ld	d,a
	inc	hl
	pop	bc
	ld	a,(hl)
	and	c
	ld	c,a
	inc	hl
	ld	a,(hl)
	and	b
	ld	h,a
	ld	l,c
	ex	de,hl

	ex	de,hl
	ex	de,hl
=

	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	bc,%1
	add	hl,bc
=
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	hl,%1	;const
	add	hl,bc

	call	l_ghtonsint
=
	ld	a,(hl)
	inc	hl
	ld	l,(hl)
	ld	h,a

	ld	l,(hl)
	ld	h,l
	ld	l,0
=
	ld	h,(hl)
	ld	l,0

	ld	h,(hl)
	ld	l,0
	ex	de,hl
=
	ld	d,(hl)
	ld	e,0

	ld	l,a
	ld	h,l
	ld	l,0
=
	ld	h,a
	ld	l,0

	ld	hl,_%1
	ld	d,(hl)
	ld	e,0
	ld	hl,(_%2)
	ld	h,0
	call	l_or
=
	ld	hl,_%1
	ld	a,(_%2)
	or	(hl)
	ld	l,a
	ld	h,0

	ld	hl,(_%1)
	ld	h,0
	ex	de,hl
	ld	hl,(_%2)
	ld	h,0
	call	l_or
=
	ld	hl,_%1
	ld	a,(_%2)
	or	(hl)
	ld	l,a
	ld	h,0

	ld	l,a
	ld	h,0
	xor	%1
	ld	l,a
	ld	h,0
=
	xor	%1
	ld	l,a
	ld	h,0

	ld	h,0
	ld	h,0
=
	ld	h,0

	ld	a,l
	ld	l,a
=
	ld	a,l

	ld	h,0
	ld	a,l
	rla
	sbc	a
	ld	h,a
=
	ld	a,l
	rla
	sbc	a
	ld	h,a

	ld	l,(hl)
	ld	h,0
	push	hl
	ld	hl,(_%1)
	ld	l,(hl)
	ld	h,0
	pop	de
	call	l_xor
=
	ld	e,(hl)
	ld	hl,(_%1)
	ld	a,(hl)
	xor	e
	ld	l,a
	ld	h,0

	call	l_int2long_s
=
	ld	a,h
	rla
	sbc	a
	ld	e,a
	ld	d,a

	ld	a,l
	rla
	sbc	a
	ld	h,a
	rla
	sbc	a
	ld	e,a
	ld	d,a
=
	ld	a,l
	rla
	sbc	a
	ld	h,a
	ld	e,a
	ld	d,a

	ld	%1,%2
	ld	%2,%1
=
	ld	%1,%2
