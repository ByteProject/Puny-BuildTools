	ld	a,+(0 % 256)
=
	xor	a

	ld	hl,%0	;const
	ld	a,l
	ld	(%1),a
	ld	hl,%2
=
	ld	a,+(%0 % 256)
	ld	(%1),a
	ld	hl,%2

	jp	%0
.%0
=
.%0

	ex	de,hl
	ld	l,+(8 % 256)
	call	l_asr_u
=
	ld	l,h
	ld	h,0

	ex	de,hl
	ld	l,+(8 % 256)
	call	l_asr
=
	ld	a,h
	call	l_sxt

	ex	de,hl
	ld	l,+(0 % 256)
	call	l_asr%1
=

	ex	de,hl
	ld	l,+(8 % 256)
	call	l_asl
=
	ld	h,l
	ld	l,0

	ex	de,hl
	ld	l,+(0 % 256)
	call	l_asl
=

	ex	de,hl
	ld	l,+(1 % 256)
	call	l_asl
=
	add	hl,hl

	ld	hl,0	;const
	add	hl,sp
	push	hl
	call	l_gint	;%9
	inc	hl
	pop	de
	call	l_pint
=
	pop	hl
	inc	hl
	push	hl

	ld	hl,0	;const
	add	hl,sp
	call	l_gint	;%9
	inc	hl
	pop	bc
	push	hl
=
	pop	hl
	inc	hl
	push	hl

	ld	hl,0	;const
	add	hl,sp
	call	l_gint	;%9
	ld	de,%1
	add	hl,de
	pop	bc
	push	hl
=
	pop	hl
	ld	de,%1	;const
	add	hl,de
	push	hl

	ld	hl,0	;const
	add	hl,sp
	call	l_gint	;%9
	dec	hl
	pop	bc
	push	hl
=
	pop	hl
	dec	hl
	push	hl

	ld	hl,0	;const
	add	hl,sp
	push	hl
	call	l_gint	;%9
	dec	hl
	pop	de
	call	l_pint
=
	pop	hl
	dec	hl
	push	hl

	ld	hl,2	;const
	add	hl,sp
	push	hl
	call	l_gint	;%9
	inc	hl
	pop	de
	call	l_pint
=
	pop	de
	pop	hl
	inc	hl
	push	hl
	push	de

	ld	hl,2	;const
	add	hl,sp
	call	l_gint	;%9
	inc	hl
	pop	de
	pop	bc
	push	hl
	push	de
=
	pop	de
	pop	hl
	inc	hl
	push	hl
	pop	de

	ld	hl,0	;const
	add	hl,sp
	call	l_gint	;%9
	ld	de,%1
	add	hl,de
	pop	de
	pop	bc
	push	hl
	push	de
=
	pop	de
	pop	hl
	ld	bc,%1
	add	hl,bc
	push	hl
	push	de

	ld	hl,2	;const
	add	hl,sp
	call	l_gint	;%9
	dec	hl
	pop	de
	pop	bc
	push	hl
	push	de
=
	pop	de
	pop	hl
	dec	hl
	push	hl
	push	de

	ld	hl,2	;const
	add	hl,sp
	push	hl
	call	l_gint	;%9
	dec	hl
	pop	de
	call	l_pint
=
	pop	de
	pop	hl
	dec	hl
	push	hl
	push	de

	ld	hl,2	;const
	add	hl,sp
	call	l_gint	;%9
=
	pop	bc
	pop	hl
	push	hl
	push	bc

	call	dload
	call	dpush
=
	call	dldpsh

	call	l_f64_load
	call	l_f64_dpush
=
	call	l_f64_dldpsh

	jp	nz,%1
	jp	%2
.%1
=
	jp	z,%2
.%1

	jp	z,%1
	jp	%2
.%1
=
	jp	nz,%2
.%1

	jp	nz,%1
	jp	z,%2
.%1
=
	jp	z,%2
.%1

	jp	z,%1
	jp	nz,%2
.%1
=
	jp	nz,%2
.%1

	jp	z,%1
	call	%2
.%1
=
	call	nz,%2
.%1

	jp	nz,%1
	call	%2
.%1
=
	call	z,%2
.%1

	jp	z,%1
	jp	%2
.%1
=
	jp	nz,%2
.%1

	ld	hl,%1	;const
	ex	de,hl
	ld	hl,%2	;const
=
	ld	de,%1
	ld	hl,%2	;const

	ld	(%1),%2
	ld	%2,(%1)
=
	ld	(%1),%2

	jp	z,%1
	ret
.%1
=
	ret	nz
.%1

	jp	nz,%1
	ret
.%1
=
	ret	z
.%1

%notcpu gbz80
	push	hl
	ld	hl,%1	;const
	pop	de
=
	ld	de,%1	;const
	ex	de,hl

	ld	hl,0	;const
	add	hl,sp
	call	l_gint	;%9
=
	pop	hl
	push	hl

	ld	hl,%1	;const
	add	hl,sp
	ld	de,%2
	add	hl,de
=
	ld	hl,%eval(%1 %2 +)	;const
	add	hl,sp

	ld	hl,%1	;const
	add	hl,sp
	inc	hl
=
	ld	hl,%eval(%1 1 +)	;const
	add	hl,sp

	ld	de,0
	ex	de,hl
	call	l_eq
	jp	c,%1
=
	ld	a,h
	or	l
	jp	z,%1

;;; Fixes up a bug in these rules
	ld	(hl),+(%1 %% 256)
	ld	l,(hl)
	ld	h,0
	inc	de
	ld	a,h
	ld	(de),a
=
	ld	(hl),+(%1 % 256)
	inc	hl
	ld	(hl),+(%1 / 256)
	ld	hl,%1

;;; This rule causes above bug, can't stop it from firing though
	ld	de,%1	;const
	ex	de,hl
	ld	a,l
	ld	(de),a
=
	ld	(hl),+(%1 % 256)
	ld	l,(hl)
	ld	h,0

	push	de
	push	hl
	ld	hl,1	;const
	ld	de,0
	call	l_long_add
=
	call	l_inclong

	push	de
	push	hl
	ld	hl,2	;const
	ld	de,0
	call	l_long_add
=
	call	l_inclong
	call	l_inclong

	push	de
	push	hl
	ld	hl,65535	;const
	ld	de,65535
	call	l_long_add
=
	call	l_declong

	dec	hl
	ld	hl,%1	;const
=
	ld	hl,%1	;const

	inc	hl
	ld	hl,%1	;const
=
	ld	hl,%1	;const

	add	hl,%1	
	ld	hl,%2	;const
=
	ld	hl,%2	;const

	push	bc
	pop	bc
	push	hl
=
	push	hl

	push	bc
	ld	hl,%1
	pop	bc
=
	ld	hl,%1

	pop	hl
	push	hl
	pop	bc
	ret
=
	pop	hl
	ret

	ld	a,h
	or	l
	jp	nz,%1
	ld	hl,0	;const
	pop	bc
	ret
=
	ld	a,h
	or	l
	jp	nz,%1
	pop	bc
	ret

	ld	hl,_%1
	ld	bc,%2
	add	hl,bc
=
	ld	hl,_%1+%2

	ld	hl,_%1
	ld	bc,-%2
	add	hl,bc
=
	ld	hl,_%1-%2
	add	hl,bc

	ld	hl,_%1
	inc	hl
=
	ld	hl,_%1+1

%notcpu gbz80
	ld	hl,_%1
	call	l_gint	;%9
=
	ld	hl,(_%1)

%notcpu gbz80
	ld	hl,_%1
	call	l_glong
=
	ld	hl,(_%1)
	ld	de,(_%1+2)

%notcpu gbz80
	ld	hl,_%1
	ld	l,(hl)
	ld	h,0
=
	ld	hl,(_%1)
	ld	h,0

	ld	hl,%1	;const
	jp	%2
	ld	hl,%1	;const
=
	ld	hl,%1	;const
	jp	%2

	pop	bc
	pop	hl
	push	hl
	push	bc
	pop	bc
	pop	bc
	ret
=
	pop	bc
	pop	hl
	ret

	pop	bc
	push	hl
	pop	hl
	push	hl
=
	pop	bc
	push	hl

	pop	hl
	push	hl
	ld	bc,%1
	add	hl,bc
	pop	bc
	push	hl
=
	pop	hl
	ld	bc,%1
	add	hl,bc
	push	hl

	push	bc
	push	bc
	ld	hl,%1
	pop	de
	pop	bc
	push	hl
	push	de
=
	ld	hl,%1
	push	hl
	push	bc

	ld	hl,_%1
	ld	a,(hl)
	cp	%3
=
	ld	a,(_%1)
	cp	%3

	ld	hl,_%1
	ld	a,(hl)
	and	a
=
	ld	a,(_%1)
	and	a

	ld	de,%1
	pop	de
=
	pop	de

	exx
	ld	hl,%1	;const
	add	hl,sp
	ld	sp,hl
	exx
	ld	hl,%2	;const
	add	hl,sp
	ld	sp,hl
=
	exx
	ld	hl,%eval(%1 %2 +)	;const
	add	hl,sp
	ld	sp,hl
	exx

	ld	de,%1
	pop	de
=
	pop	de

	call	l_int2long_s
	pop	de
=
	pop	de

	jp	i_%1
	jp	i_%2
=
	jp	i_%1

%check 0 <= %2 <= 65535
	ld	hl,%1	;const
	add	hl,sp
	ld	bc,%2
	add	hl,bc
=
	ld	hl,%eval(%1 %2 +)	;const
	add	hl,sp

	call	l_inclong
	ld	hl,%1
=
	ld	hl,%1

	call	l_declong
	ld	hl,%1
=
	ld	hl,%1

	call	exit
	pop	%1
=
	call	exit

	call	exit
	ld	hl,%1	;const
	add	hl,sp
	ld	sp,hl
=
	call	exit

	push	hl
	pop	bc
	ret
=
	ret

	ld	de,1	;const
	ex	de,hl
	call	l_eq
	jp	nc,%1
=
	dec	hl
	ld	a,h
	or	l
	jp	nz,%1

	ld	de,1	;const
	ex	de,hl
	call	l_eq
	jp	c,%1
=
	dec	hl
	ld	a,h
	or	l
	jp	z,%1

	ld	de,65535	;const
	ex	de,hl
	call	l_ne
	jp	nc,%1
=
	inc	hl
	ld	a,h
	or	l
	jp	z,%1

	push	de
	ld	hl,65535	;const
	pop	de
	call	l_eq
	jp	nc,%1
=
	inc	de
	ld	a,d
	or	e
	jp	nz,%1

	push	de
	ld	hl,65535	;const
	pop	de
	call	l_eq
	jp	c,%1
=
	inc	de
	ld	a,d
	or	e
	jp	z,%1

	push	de
	ld	hl,1	;const
	pop	de
	call	l_eq
	jp	c,%1
=
	dec	de
	ld	a,d
	or	e
	jp	z,%1

	push	de
	ld	hl,1	;const
	pop	de
	call	l_eq
	jp	nc,%1
=
	dec	de
	ld	a,d
	or	e
	jp	nz,%1

	ld	de,65535	;const
	ex	de,hl
	call	l_eq
	jp	nc,%1
=
	inc	hl
	ld	a,h
	or	l
	jp	nz,%1

	ld	de,65535	;const
	ex	de,hl
	call	l_eq
	jp	c,%1
=
	inc	hl
	ld	a,h
	or	l
	jp	z,%1

	ld	hl,0	;const
	ld	de,0
	call	l_long_as%1
=
	pop	bc
	pop	bc

	ld	hl,%1	;const
	ld	de,%2
	call	l_long_as%3
=
	ld	l,+(%1 % 256)
	call	l_long_as%3

	push	hl
	call	l_glong
	push	de
	push	hl
	pop	bc
	pop	bc
	pop	bc
	call	l_plong
=

	ld	hl,%1	;const
	add	hl,sp
	ld	hl,%2
=
	ld	hl,%2

	ld	hl,%1	;const
	call	l_as%2
=
	ld	l,+(%1 % 256)
	call	l_as%2

	ld	de,%1	;const
	ex	de,hl
	call	l_as%2
=
	ex	de,hl
	ld	l,+(%1 % 256)
	call	l_as%2

	ex	de,hl
	pop	hl
	push	hl
	ex	de,hl
=
	pop	de
	push	de

	pop	hl
	push	hl
	ex	de,hl
=
	pop	de
	push	de

.%1
	jp	%3
.%2
	jp	%1
.%3
=
.%1
.%2
.%3

	pop	de
	pop	bc
	push	hl
	push	de
	pop	bc
	pop	hl
	push	hl
	push	bc
=
	pop	de
	pop	bc
	push	hl
	push	de

	ld	a,h
	or	l
	jp	nz,%1
	ld	hl,1	;const
=
	ld	a,h	
	or	l
	jp	nz,%1
	inc	hl

	pop	hl
	push	hl
	ld	a,l
	cp	%2
	jp	z,%3
	pop	hl
	push	hl
	ld	a,l
=
	pop	hl
	push	hl
	ld	a,l
	cp	%2
	jp	z,%3

	ld	hl,%1	;const
	add	hl,sp
	ld	a,(hl)
	cp	%2
	jp	z,%3
	ld	hl,%1	;const
	add	hl,sp
	ld	a,(hl)
=
	ld	hl,%1	;const
	add	hl,sp
	ld	a,(hl)
	cp	%2
	jp	z,%3

	push	de
	push	hl
	ld	l,%1
	call	l_long_asl
=
	ld	a,%1
	call	l_long_aslo

	push	de
	push	hl
	ld	l,%1
	call	l_long_asr%2
=
	ld	c,%1
	call	l_long_asr%2o

	ld	l,(hl)
	ld	h,0
	ld	de,%1
	ex	de,hl
=
	ld	e,(hl)
	ld	d,0
	ld	hl,%1

	call	l_gint	;%9
	push	hl
	ld	hl,%1
=
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	push	de
	ld	hl,%1

%notcpu gbz80
	ld	hl,_%1
	ld	de,%2
	ex	de,hl
	call	l_pint
=
	ld	hl,%2
	ld	(_%1),hl

	pop	bc
	push	hl
	pop	bc
	push	hl
=
	pop	bc
	push	hl

	ld	hl,%1	;const
	add	hl,sp
	push	hl
	call	l_gint	;%9
	pop	de
	call	l_pint
=
	ld	hl,%1	;const
	add	hl,sp
	call	l_gint	;%9

	ld	hl,%1	;const
	add	hl,sp
	push	hl
	call	l_glong
	pop	bc
	call	l_plong
=
	ld	hl,%1	;const
	add	hl,sp
	call	l_glong

	push	de
	push	hl
	ld	hl,%1	;const
	add	hl,sp
	call	l_gint	;%9
	call	l_int2long_s
	call	l_long_asl
=
	push	hl
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp
	ld	a,(hl)
	pop	hl
	call	l_long_aslo

	push	de
	push	hl
	ld	hl,%1	;const
	add	hl,sp
	call	l_gint	;%9
	ld	de,0
	call	l_long_asl
=
	push	hl
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp
	ld	a,(hl)
	pop	hl
	call	l_long_aslo

%notcpu gbz80
	ld	a,+(16 % 256)
	call	l_long_aslo
=
	ex	de,hl
	ld	hl,0	;const

%notcpu gbz80
	push	hl
	ld	hl,(_%1
	pop	de
=
	ex	de,hl
	ld	hl,(_%1

	pop	hl
	push	hl
	ex	de,hl
=
	pop	de
	push	de

	ld	hl,0	;const
	add	hl,sp
	ld	a,(hl)
	add	a,%1
	ld	(hl),a
	ld	l,a
	ld	h,0
=
	pop	hl
	ld	a,l
	add	a,%1
	ld	l,a
	push	hl
	ld	h,0

	push	de
	pop	bc
	pop	hl
	push	hl
	push	bc
=
	pop	hl
	push	hl
	push	de

	push	de
	ld	hl,%1	;const
	add	hl,sp
	ld	a,(hl)
	pop	de
=
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp
	ld	a,(hl)

	ld	hl,%1
	push	hl
	ld	hl,%1
=
	ld	hl,%1
	push	hl

	ld	hl,%1
	add	hl,sp
	push	hl
	ld	hl,%1
	add	hl,sp
=
	ld	hl,%1
	add	hl,sp
	push	hl
	dec	hl
	dec	hl

	ld	hl,0	;const
	jp	%2
.%1
	ld	hl,1	;const
.%2
	ld	a,h
	or	l
	jp	z,%3
=
	ld	hl,0	;const
	jp	%3
.%1
	ld	hl,1	;const
.%2
	ld	a,h
	or	l
	jp	z,%3

	ld	hl,(%1)
	ld	h,0
	dec	hl
	ld	a,l
	ld	(%1),a
	inc	hl
=
	ld	hl,%1
	ld	a,(hl)
	dec	(hl)
	ld	l,a
	ld	h,0

	ld	hl,(%1)
	ld	h,0
	inc	hl
	ld	a,l
	ld	(%1),a
	dec	hl
=
	ld	hl,%1
	ld	a,(hl)
	inc	(hl)
	ld	l,a
	ld	h,0

	ld	l,a
	ld	h,0
	ld	hl,%1
=
	ld	hl,%1

	ld	l,(hl)
	ld	h,0
	ld	hl,%1
=
	ld	hl,%1

	ld	hl,%1
	%2	(hl)
	ld	hl,(%1)
	ld	h,0
=
	ld	hl,%1
	%2	(hl)
	ld	l,(hl)
	ld	h,0

	ld	l,a
	ld	h,0
.%1
	ld	hl,%2
=
.%1
	ld	hl,%2

	ld	a,l
	ld	(de),a
	ld	a,h
	or	l
	jp	z,%1
=
	ld	a,l
	ld	(de),a
	and	a
	jp	z,%1

	ld	a,l
	ld	(de),a
	ld	a,h
	or	l
	jp	nz,%1
=
	ld	a,l
	ld	(de),a
	and	a
	jp	nz,%1

	ld	e,(hl)
	ld	d,0
	ld	hl,%1	;const
	call	l_eq
	jp	nc,%2
	ld	hl,%3
=
	ld	a,(hl)
	cp	+(%1 % 256)
	jp	nz,%2
	ld	hl,%3

	ld	e,(hl)
	ld	d,0
	ld	hl,%1	;const
	call	l_eq
	jp	c,%2
	ld	hl,%3
=
	ld	a,(hl)
	cp	+(%1 % 256)
	jp	z,%2
	ld	hl,%3

	ld	e,(hl)
	ld	d,0
	ld	hl,%1	;const
	call	l_ne
	jp	c,%2
	ld	hl,%3
=
	ld	a,(hl)
	cp	+(%1 % 256)
	jp	nz,%2
	ld	hl,%3

	ld	hl,(%1)
	ld	h,0
	ld	a,h
	or	l
	jp	nz,%2
	ld	hl,%3
=
	ld	a,(%1)
	and	a
	jp	nz,%2
	ld	hl,%3

%notcpu gbz80
	push	hl
	ld	hl,(%1)
	ld	h,0
	pop	de
=
	ex	de,hl
	ld	hl,(%1)
	ld	h,0

	pop	hl
	push	hl
	push	hl
	pop	bc
	pop	hl
	push	hl
	push	bc
=
	pop	hl
	push	hl
	push	hl

	ld	de,0	;const
	ex	de,hl
	call	l_eq
	pop	bc
	push	hl
	ld	a,h
	or	l
	jp	z,%1
=
	pop	bc
	push	hl
	ld	a,h
	or	l
	jp	nz,%1

%notcpu gbz80
	push	hl
	pop	bc
	pop	hl
	push	hl
	push	bc
	pop	de
=
	ex	de,hl
	pop	hl
	push	hl

	push	hl
	ld	(%1),hl
	pop	hl
=
	ld	(%1),hl

%notcpu gbz80
	ld	l,(hl)
	ld	h,0
	ex	de,hl
	ld	hl,%1
=
	ld	e,(hl)
	ld	d,0
	ld	hl,%1

%notcpu gbz80
	ld	hl,_%1
	ex	de,hl
	pop	hl
	push	hl
	call	l_pint
=
	pop	hl
	ld	(_%1),hl
	push	hl

	push	hl
	pop	hl
	ret
=
	ret

	push	de
	push	hl
	ld	hl,0	;const
	ld	de,0
	call	l_long_eq
	jp	c,%1
=
	ld	a,h
	or	l
	or	e
	or	d
	jp	z,%1

	pop	bc
	push	hl
	ld	a,h
	or	l
	jp	nz,%1
	pop	bc
	ret
.%1
=
	pop	bc
	ld	a,h
	or	l
	ret	z
	push	hl
.%1

; Rules for optimizing the tail of if statements (valid for && and || )
; These are only valid if we don't try to set a variable to the logical result, if
; we do then it's a tad pointless and you'll suffer!!! <cackle?
=
;

	ld	hl,0	;const
	jr	%1
.%2
	ld	hl,1	;const
.%1
	ld	a,h
	or	l
	jp	z,%3
=
	jp	%3
.%2

	ld	hl,1	;const
	jr	%1
.%2
	ld	hl,0	;const
.%1
	ld	a,h
	or	l
	jp	z,%3
=
	jr	%1_%2
.%2
	jp	%3
.%1_%2

	jp	n%0,%1
	jr	%2
.%1
	jp	%3
.%2
=
	jr	%0,%2
.%1
	jp	%3
.%2

	ld	a,h
	or	l
	jp	nz,%1
	ld	hl,0	;const
	jp	%2
.%1
=
	ld	a,h
	or	l
	jp	z,%2
.%1

	jp	nc,%1
	jp	%2
.%1
=
	jp	c,%2
.%1

	jp	c,%1
	jp	%2
.%1
=
	jp	nc,%2
.%1

	jr	c,%1
.%2
	jp	%3
.%1
	jp	%4
.%3
	jp	%5
.%4
=
	jr	c,%4
.%2
.%3
	jp	%5
.%1
.%4

	jr	z,%1
	jp	nc,%2
.%1
	jr	%3
.%2
	jp	%5
.%3
=
	jr	z,%3
	jr	c,%3
.%2
	jp	%5
.%3

	push	de
	ld	hl,%1
	pop	de
=
	ld	hl,%1

	ld	hl,%1
	%2	(hl)
	ld	a,(%1)
=
	ld	hl,%1
	%2	(hl)
	ld	a,(hl)

	push	de
	pop	hl
	push	hl
=
	push	de
	ld	l,e
	ld	h,d

	pop	bc
	pop	hl
	push	hl
	push	bc
	ld	de,%1	;const
	ex	de,hl
=
	pop	bc
	pop	de
	push	de
	push	bc
	ld	hl,%1	;const

%notcpu gbz80
	push	hl
	ld	hl,%1	;const
	add	hl,sp
	call	l_gint	;%9
	pop	de
=
	ex	de,hl
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp
	call	l_gint	;%9

%notcpu 8080
%notcpu gbz80
	ld	hl,%1
	ex	de,hl
	ld	hl,%2
=
	ld	de,%1
	ld	hl,%2

	push	%1
	pop	%1
	push	%1
=
	push	%1

	pop	bc
	pop	hl
	push	hl
	push	bc
	push	hl
	pop	bc
	pop	hl
	push	hl
	push	bc
	push	hl
=
	pop	de
	pop	hl
	push	hl
	push	de
	push	hl
	push	de

	ld	hl,4	;const
	add	hl,sp
	push	hl
	ld	hl,6	;const
	add	hl,sp
=
	ld	hl,4	;const
	add	hl,sp
	push	hl

	ld	hl,%1	;const
	ld	a,l
	ld	l,h
	ld	h,a
=
	ld	hl,+( (%1/256) + (%1 % 256 )*256 )

	ld	hl,0	;const
	add	hl,sp
	push	hl
	call	l_gint	;%9
	ld	bc,%1
	add	hl,bc
	pop	de
	call	l_pint
=
	pop	hl
	ld	bc,%1
	add	hl,bc
	push	hl

	call	exit
	ret
=
	jp	exit

	ld	l,(hl)
	ld	h,0
.%1
	ld	hl,%2
=
.%1
	ld	hl,%2

	ld	(hl),+(%1 % 256)
	ld	l,(hl)
	ld	h,0
	pop	de
	ld	a,l
	ld	(de),a
	ld	hl,%2
=
	ld	a,+(%1 % 256)
	ld	(hl),a
	pop	de
	ld	(de),a
	ld	hl,%2

	pop	hl
	inc	hl
	push	hl
	dec	hl
	ld	(hl),+(%1 % 256)
=
	pop	hl
	ld	(hl),+(%1 % 256)
	inc	hl
	push	hl
	dec	hl

	push	hl
	pop	hl
	%1c	hl
	push	hl
=
	%1c	hl
	push	hl

	ld	hl,%1
	exx
	ld	hl,%2
	add	hl,sp
	ld	sp,hl
	exx
	ret
=
	ld	hl,%2
	add	hl,sp
	ld	sp,hl
	ld	hl,%1
	ret

	ld	e,(hl)
	ld	d,0
	ld	hl,%1	;const
	call	l_and
=
	ld	a,(hl)
	and	+(%1 % 256)
	ld	l,a
	ld	h,0

	ld	l,a
	ld	h,0
	ld	h,l
	ld	l,0
=
	ld	h,a
	ld	l,0

	ld	hl,0	;const
	push	hl
	ld	hl,1	;const
=
	ld	hl,0	;const
	push	hl
	inc	hl

	ld	hl,1	;const
	push	hl
	ld	hl,0	;const
=
	ld	hl,1	;const
	push	hl
	dec	hl

	push	hl
	ld	a,h
	or	l
	jp	%1
	pop	hl
	push	hl
=
	push	hl
	ld	a,h
	or	l
	jp	%1

%notcpu gbz80
	push	hl
	ld	hl,%1
	pop	de
=
	ex	de,hl
	ld	hl,%1

	push	bc
	ld	hl,%1	;const
	add	hl,sp
	call	l_gint	;%9
	pop	bc
	push	hl
=
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp
	call	l_gint	;%9
	push	hl

	exx
	ld	hl,%1	;const
	add	hl,sp
	ld	sp,hl
	exx
	ld	hl,%2
=
	ld	hl,%1	;const
	add	hl,sp
	ld	sp,hl
	ld	hl,%2

	push	af
	ld	hl,%1
	pop	af
=
	ld	hl,%1

	ld	l,(hl)
	ld	h,0
	ld	a,l
	ld	l,h
	ld	h,a
=
	ld	h,(hl)
	ld	l,0

	pop	bc
	push	hl
	ld	a,h
	or	l
	jp	nz,%1
	pop	bc
	ret
=
	pop	bc
	ld	a,h
	or	l
	ret	z
	push	hl
	jp	%1

	ld	h,0
	%1c	l
	ld	a,h
	or	l
	jp	%2
=
	ld	h,0
	%1c	l
	jp	%2

	ld	a,h
	or	l
	jp	nz,%1
	ld	hl,0	;const
=
	ld	a,h
	or	l
	jp	nz,%1

	ld	l,e
	ld	h,d
	ld	bc,%1
	add	hl,bc
=
	ld	hl,%1
	add	hl,de

	ld	hl,(%1)
	ld	h,0
	ld	a,l
	ld	(de),a
	ld	hl,%2
=
	ld	a,(%1)
	ld	(de),a
	ld	hl,%2

	jp	z,%1
	jr	%2
.%1
	jp	%3
.%2
=
	jr	nz,%2
.%1
	jp	%3
.%2

	ld	hl,%1	;const
	add	hl,sp
	call	l_gint	;%9
	ld	a,(hl)
	cp	%2
	jp	%3
	ld	hl,%1	;const
	add	hl,sp
	call	l_gint	;%9
	ld	a,(hl)
	cp	%4
=
	ld	hl,%1	;const
	add	hl,sp
	call	l_gint	;%9
	ld	a,(hl)
	cp	%2
	jp	%3
	cp	%4

	jp	nc,%1
	ld	hl,1	;const
	jr	%2
.%1
	ld	hl,0	;const
.%2
	ld	a,h
	or	l
	jp	nz,%3
	ld	hl,%4
=
	jp	c,%3
.%1
	jr	%1_%2
.%2
	ld	a,h
	or	l
	jp	nz,%3
.%1_%2
	ld	hl,%4

	jp	%1,%2
.%3
	jp	%4
.%2
=
	jr	%1,%2
.%3
	jp	%4
.%2

; These next few rules deal with optimizing for testing a
; signed int for being < 0, we end up with saving of 7 bytes
=
;

	ld	hl,0	;const
	call	l_lt
	jp	nc,%1
	ld	hl,%2
=
	bit	7,d
	jp	z,%1
	ld	hl,%2

	ld	hl,0	;const
	call	l_lt
	jp	c,%1
	ld	hl,%2
=
	bit	7,d
	jp	nz,%1
	ld	hl,%2

	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	bit	7,d
=
	inc	hl
	ld	a,(hl)
	bit	7,a

	ld	a,(hl)
	bit	7,a
	jp	nz,%1
=
	ld	a,(hl)
	rlca
	jp	c,%1

	ld	a,(hl)
	bit	7,a
	jp	z,%1
=
	ld	a,(hl)
	rlca
	jp	nc,%1

	ld	hl,%1
	push	hl
	pop	bc
	pop	hl
	push	hl
	push	bc
	add	hl,hl
	pop	de
	add	hl,de
=
	pop	hl
	push	hl
	add	hl,hl
	ld	de,%1
	add	hl,de

	ld	hl,%1
	push	hl
	pop	bc
	pop	hl
	push	hl
	push	bc
	push	hl
=
	pop	hl
	push	hl
	ld	de,%1
	push	de
	push	hl

	ld	hl,%1
	ld	de,%2
	ex	de,hl
	call	l_eq
=
	ld	hl,%1
	ld	de,%2
	call	l_eq

	ld	hl,%1
	ld	de,0	;const
	call	l_eq
	jp	c,%4
	ld	hl,%3
=
	ld	hl,%1
	ld	a,h
	or	l
	jp	z,%4
	ld	hl,%3

	ex	de,hl
	ld	de,%1
	ex	de,hl
=
	ld	hl,%1

	ld	hl,%1	;const
	add	hl,sp
	pop	de
	add	hl,de
	dec	hl
=
	ld	hl,%1-1	;const
	add	hl,sp
	pop	de
	add	hl,de

	pop	bc
	push	hl
	%1c	hl
	%1c	hl
	pop	bc
	push	hl
=
	%1c	hl
	%1c	hl
	pop	bc
	push	hl

	ld	hl,%1
	inc	(hl)
	ld	l,(hl)
	ld	h,0
	dec	l
	ld	a,(%1)
=
	ld	hl,%1
	ld	a,(hl)
	inc	(hl)

	pop	hl
	push	hl
	pop	bc
	pop	bc
	ret
=
	pop	hl
	pop	bc
	ret

	ld	l,(hl)
	ld	h,0
	%1c	hl
	ld	hl,%2
=
	ld	hl,%2

	ld	hl,0	;const
	add	hl,sp
	add	a,+(%1 % 256)
	ld	(hl),a
	ld	l,a
	ld	h,0
=
	pop	hl
	ld	a,l
	add	a,+(%1 % 256)
	ld	l,a
	push	hl
	ld	h,0

	ld	hl,%1
	add	hl,sp
	push	hl
	ld	hl,%2
	call	dload
	pop	hl
	call	dstore
=
	ld	hl,%2
	call	dload
	ld	hl,%1
	add	hl,sp
	call	dstore

	ld	e,(hl)
	ld	d,0
	ld	hl,(%1)
	ld	h,0
	call	l_eq
	jp	nc,%2
=
	ld	a,(%1)
	cp	(hl)
	jp	nz,%2

	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	l,+(8 % 256)
	call	l_asr_u
=
	inc	hl
	ld	l,(hl)
	ld	h,0

%notcpu gbz80
	push	hl
	ld	hl,%1	;const
	add	hl,sp
	ld	l,(hl)
	ld	h,0
	pop	de
=
	ex	de,hl
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp
	ld	l,(hl)
	ld	h,0

	jp	nc,%1
	call	%2
.%1
=
	call	c,%2
.%1

	jp	c,%1
	call	%2
.%1
=
	call	nc,%2
.%1

	ld	e,(hl)
	ld	d,0
	ld	hl,%1	;const
	call	l_eq
	ld	hl,0	;const
	rl	l
=
	ld	a,(hl)
	cp	+( %1 % 256)
	ld	hl,0	;const
	jr	nz,ASMPC+3
	inc	hl

	ld	e,(hl)
	ld	d,0
	ld	hl,%1	;const
	call	l_eq
	ld	hl,%2
	jp	c,%3
	ld	hl,%4
=
	ld	a,(hl)
	cp	+(%1 % 256)
	ld	hl,%2
	jp	z,%3
	ld	hl,%4

	jr	z,ASMPC+3
	scf
	call	c,%2
=
	call	nz,%2

	jr	nz,ASMPC+3
	scf
	call	c,%2
=
	call	z,%2

	call	l_gchar
	push	hl
	ld	hl,%1	;const
	add	hl,sp
	call	l_gchar
	pop	de
	ld	a,l
	sub	e
=
	ld	e,(hl)
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp
	ld	a,(hl)
	sub	e

	ld	e,(hl)
	ld	d,0
	ld	hl,%1	;const
	add	hl,sp
	ld	l,(hl)
	ld	h,0
	ld	a,l
	sub	e
=
	ld	e,(hl)
	ld	hl,%1	;const
	add	hl,sp
	ld	a,(hl)
	sub	e

	ld	e,(hl)
	ld	d,0
	ld	hl,%1	;const
	ld	a,l
	sub	e
=
	ld	a,+(%1 % 256)
	sub	(hl)

	ld	e,(hl)
	ld	d,0
	ld	hl,%1	;const
	ld	a,e
	sub	l
=
	ld	a,(hl)
	sub	+(%1 % 256)

	call	l_gchar
	ld	de,%1	;const
	ex	de,hl
	ld	a,e
	sub	l
=
	ld	a,(hl)
	sub	+(%1 % 256)

	xor	a
	sub	(hl)
	and	a
	jr	nz,ASMPC+3
	scf
	jp	nc,%1
=
	ld	a,(hl)
	and	a
	jp	nz,%1

	ld	l,a
	ld	h,0
	ld	de,%1	;const
	ex	de,hl
	ld	a,l
	sub	e
	and	a
	jr	nz,ASMPC+3
	scf
	jp	nc,%2
=
	cp	+(%1 % 256)
	jp	nz,%2

	ld	l,(hl)
	ld	h,0
	push	hl
	ld	hl,%1	;const
	add	hl,sp
	ld	a,(hl)
	%2	+%3
	ld	l,a
	ld	h,0
	pop	de
	ld	a,e
=
	ld	e,(hl)
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp
	ld	a,(hl)
	%2	+%3
	ld	l,a
	ld	a,e

	and	a
	jr	nz,ASMPC+3
	scf
	jp	%2c,%1
=
	and	a
	jp	%2z,%1

	ld	l,(hl)
	ld	h,0
	ld	a,l
	and	a
	jp	%2z,%1
=
	ld	a,(hl)
	and	a
	jp	%2z,%1

	ld	hl,(%1)
	ld	h,0
	ld	de,%2	;const
	ex	de,hl
=
	ld	a,(%1)
	ld	e,a
	ld	d,0
	ld	hl,%2	;const

	ex	de,hl
	ld	a,h
	or	l
	jp	z,%1
	ld	hl,%2
=
	ld	a,d
	or	e
	jp	z,%1
	ld	hl,%2

	ld	hl,1	;const
	add	hl,sp
	ld	l,(hl)
	ld	h,0
=
	pop	hl
	push	hl
	ld	l,h
	ld	h,0

	ld	l,a
	ld	h,0
	ld	de,%1
	ex	de,hl
=
	ld	e,a
	ld	d,0
	ld	hl,%1

	ld	l,(hl)
	ld	h,0
	%1c	l
	ld	hl,%2
=
	ld	hl,%2

	jp	%1


.%1
=

	pop	hl
	push	hl
	pop	bc
=
	pop	hl

	push	hl
	pop	de
	push	de
=
	push	hl
	ld	d,h
	ld	e,l

%notcpu 8080
	push	hl
	call	l_gint	;
	inc	hl
	pop	de
	call	l_pint
=
	inc	(hl)
	ld	a,(hl)
	inc	hl
	jr	nz,ASMPC+3
	inc	(hl)
	ld	h,(hl)
	ld	l,a

%notcpu 8080
	push	hl
	call	l_gint	;
	dec	hl
	pop	de
	call	l_pint
=
	dec	(hl)
	ld	a,(hl)
	inc	hl
	cp	255
	jr	nz,ASMPC+3
	dec	(hl)
	ld	h,(hl)
	ld	l,a

	jp	%1
.%2
	jp	%1
.%3
=
.%2
	jp	%1
.%3

	jp	z,%1
	jp	%2
.%1
=
	jp	nz,%2
.%1

	jp	%1
.%2
.%1
=
.%2
.%1

	ld	hl,%1	;const
	ld	(%2),hl
	ld	hl,%1	;const
=
	ld	hl,%1	;const
	ld	(%2),hl

	ex	de,hl
	ex	de,hl
=

	exx
	exx
=

	call	l_gint	;%2
	ld	hl,%1
=
	ld	hl,%1

	add	hl,sp
	ld	hl,%1
=
	ld	hl,%1

	push	hl
	call	l_gint	;%1
	ld	a,h
	and	%2
	ld	h,a
	ld	l,0
	pop	de
	call	l_pint
=
	inc	hl
	ld	a,(hl)
	and	%2
	ld	(hl),a
	dec	hl
	ld	(hl),0
	ld	h,a
	ld	l,0

	set	%1,d
	pop	de
=
	pop	de

	set	%1,e
	pop	de
=
	pop	de

	ld	de,0	;const
	ex	de,hl
	call	l_eq
	ccf
	jp	nc,%1
	pop	hl
=
	ld	a,h
	or	l
	jp	z,%1
	pop	hl

	ld	hl,0	;const
	call	l_eq
	jp	nc,%1
	ld	hl,%2
=
	ld	a,d
	or	e
	jp	nz,%1
	ld	hl,%2

	ld	hl,%1
	push	hl
	ld	hl,%2
	add	hl,hl
	pop	de
	add	hl,de
=
	ld	de,%1
	ld	hl,%2
	add	hl,hl
	add	hl,de

	ld	hl,%1
	push	hl
	ld	hl,%2
	%3c	hl
	add	hl,hl
	pop	de
	add	hl,de
=
	ld	de,%1
	ld	hl,%2
	%3c	hl
	add	hl,hl
	add	hl,de

	ld	e,a
	ld	d,0
	ld	a,d
	or	e
	jr	%1
=
	ld	e,a
	ld	d,0
	and	a
	jr	%1

	call	l_gint	;%2
	ld	de,%1
	ex	de,hl
=
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	hl,%1

	ld	hl,%1
	push	hl
	ld	hl,%2
	push	hl
	pop	de
	pop	hl
=
	ld	hl,%1
	ld	de,%2

	ld	l,(hl)
	ld	h,0
	push	hl
	pop	de
=
	ld	e,(hl)
	ld	d,0

	ld	sp,hl
	ld	hl,0	;const
	add	hl,sp
=
	ld	sp,hl

%notcpu 8080
%notcpu gbz80
	call	memset
	pop	bc
	pop	bc
	pop	bc
=
	call	memset_callee

%notcpu 8080
%notcpu gbz80
	call	memcpy
	pop	bc
	pop	bc
	pop	bc
=
	call	memcpy_callee

	push	hl
	pop	de
	ld	a,%1
	ld	(de),a
	ld	hl,%2
=
	ld	(hl),%1
	ld	hl,%2

	push	hl
	push	bc
	pop	bc
	pop	hl
=


	ld	hl,%1	;const
	dec	sp
	ld	a,l
	pop	hl
	ld	l,a
	push	hl
=
	dec	sp
	pop	hl
	ld	l,+(%1 % 256)
	push	hl

	dec	sp
	pop	hl
	ld	l,+%1
	push	hl
	dec	sp
	pop	hl
	ld	l,+%2
	push	hl
=
	ld	hl,+(( %1 * 256) + %2)
	push	hl

%check 0 <= %1 <= 127
	ld	hl,%1	;const
	ld	a,l
	call	l_sxt
=
	ld	hl,%1	;const

%notcpu gbz80
	push	hl
	ld	hl,%1
	pop	de
=
	ex	de,hl
	ld	hl,%1

	ld	hl,%1	;const
	ld	a,l
	call	l_sxt
=
	ld	a,+(%1 % 256)
	call	l_sxt

	ex	de,hl
	call	l_eq
=
	call	l_eq

	ex	de,hl
	call	l_ne
=
	call	l_ne

%notcpu gbz80
	push	hl
	pop	bc
	pop	hl
	push	hl
	push	bc
=
	pop	de
	push	de
	push	hl
	ex	de,hl

%cpu gbz80
	push	hl
	pop	bc
	pop	hl
	push	hl
	push	bc
	pop	de
=
	ld	d,h
	ld	e,l
	pop	hl
	push	hl

%notcpu 8080
	ld	hl,(%1)
	pop	de
	push	de
	push	hl
	ex	de,hl
=
	pop	hl
	push	hl
	ld	de,(%1)
	push	de

	ld	hl,%1	;const
	pop	de
	push	de
	push	hl
	ex	de,hl
=
	pop	hl
	push	hl
	ld	bc,%1
	push	bc

%notcpu gbz80
	ld	hl,_%1
	pop	de
	push	de
	push	hl
	ex	de,hl
=
	pop	hl
	push	hl
	ld	bc,_%1
	push	bc

	ld	h,a
	ld	l,0
	ld	a,h
	or	l
	jp	%1,%2
=
	ld	h,a
	ld	l,0
	and	a
	jp	%1,%2

%notcpu gbz80
	ld	hl,_%1
	ld	(hl),+(%2 % 256)
	inc	hl
	ld	(hl),+(%2 / 256)
	ld	hl,%3
=
	ld	hl,%2	;const
	ld	(_%1),hl
	ld	hl,%3

	call	l_gintspsp	;
	pop	hl
=
	add	hl,sp
	call	l_gint

	ld	l,(hl)
	ld	h,0
	ld	de,0
	ld	d,e
	ld	e,h
	ld	h,l
	ld	l,0
=
	ld	h,(hl)
	ld	l,0
	ld	de,0

	ld	de,0
	call	l_long_or
=
	pop	de
	call	l_or
	pop	de

	ld	l,(hl)
	ld	h,0
	ld	de,0
	ld	d,l
	ld	e,0
	ld	hl,0	;const
=
	ld	d,(hl)
	ld	e,0
	ld	h,e
	ld	l,h

	ld	de,0
	ld	l,0
	rl	d
	rl	l
	rl	d
	rl	l
	ld	h,0
	ld	de,0
=
	ld	hl,0	;const
	ld	de,0

%notcpu gbz80
	ld	h,(hl)
	ld	l,0
	pop	de
	call	l_or
=
	pop	de
	ld	a,d
	or	(hl)
	ld	d,a
	ex	de,hl

	call	l_glong
	ld	d,e
	ld	e,h
	ld	h,l
	ld	l,0
=
	ld	a,(hl)
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	h,a
	ld	l,0

	call	l_glong
	ld	l,d
	ld	h,0
	ld	de,0
	ld	h,0
=
	inc	hl
	inc	hl
	inc	hl
	ld	l,(hl)
	ld	h,0
	ld	de,0

%notcpu gbz80
	call	l_glong
	ld	l,h
	ld	h,e
	ld	e,d
	ld	d,0
=
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	l,(hl)
	ld	h,0
	ex	de,hl

	call	l_gint	;
	call	l_glong
=
	call	l_glonghlp

	ld	hl,%1
	ld	hl,%2	;const
=
	ld	hl,%2	;const

	call	l_glong
	ex	de,hl
	ld	de,0
=
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ex	de,hl
	ld	de,0

	ld	e,(hl)
	ld	d,0
	ld	hl,0	;const
	call	l_long_or
=
	ld	a,(hl)
	pop	hl
	pop	de
	or	e
	ld	e,a

	ld	hl,%1	;const
	call	l_gintspsp	;
	ld	hl,%2
	pop	de
=
	ld	hl,%1	;const
	add	hl,sp
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	hl,%2

	ld	l,%1
	ld	h,%2
	pop	de
	ex	de,hl
=
	ld	e,%1
	ld	d,%2
	pop	hl

	push	hl
	ld	hl,%1
	ld	de,%2
	pop	bc
	call	l_plong
=
	ld	b,h
	ld	c,l
	ld	hl,%1
	ld	de,%2
	call	l_plong

%notcpu gbz80
	call	l_glong
	push	de
	push	hl
	ld	hl,%1
=
	call	l_glong2sp
	ld	hl,%1

	call	l_glonghlp
	push	de
	push	hl
=
	call	l_glong2sp_hlp

	ld	b,h
	ld	c,l
	ld	hl,%1	;const
	ld	de,%2
	call	l_plong
	ld	hl,%3
=
	ld	(hl),+(%1 %% 256)
	inc	hl
	ld	(hl),+(%1 / 256)
	inc	hl
	ld	(hl),+(%2 %% 256)
	inc	hl
	ld	(hl),+(%2 / 256)
	ld	hl,%3

	ld	h,%1
	ld	h,%2
=
	ld	h,%2

	ld	l,h
	ld	h,0
	ex	de,hl
	ld	hl,%1
=
	ld	e,h
	ld	d,0
	ld	hl,%1

	pop	de
	push	de
	push	hl
	ex	de,hl
	pop	de
=
	pop	de
	push	de
	ex	de,hl

	call	l_gintspsp	;
	ld	hl,%1	;const
	add	hl,sp
	ld	l,(hl)
	ld	h,0
	pop	de
=
	add	hl,sp
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp
	ld	l,(hl)
	ld	h,0

	ld	hl,0	;const
	add	hl,sp
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
=
	pop	de
	push	de

	ld	l,(hl)
	ld	h,0
	pop	de
	push	de
	ex	de,hl
=
	ld	e,(hl)
	ld	d,0
	pop	hl
	push	hl

	push	de
	ld	hl,%1	;const
	add	hl,sp
	call	l_gint	;
	pop	de
=
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp
	call	l_gint

	ld	l,(hl)
	ld	h,0
	ld	a,l
	and	%1
	ld	l,a
=
	ld	a,(hl)
	and	%1
	ld	l,a
	ld	h,0

	ld	h,0
	ld	h,0
=
	ld	h,0

	ld	l,a
	ld	h,0
	ld	a,h
	or	l
	jp	%1
=
	ld	l,a
	ld	h,0
	and	a
	jp	%1

	ld	l,(hl)
	ld	h,0
	%3c	l
.i%1
	ld	hl,%2
=
.i%1
	ld	hl,%2

%notcpu 8080
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
=
	sla	l
	ld	h,l
	ld	l,0

%notcpu 8080
	ld	h,0
	srl	l
	add	hl,hl
	add	hl,hl
=
	ld	h,0
	add	hl,hl

%notcpu 8080
	ld	h,0
	srl	h
	rr	l
=
	ld	h,0
	srl	l

%notcpu 8080
	ld	h,0
	srl	l
	srl	h
	rr	l
=
	ld	h,0
	srl	l
	srl	l

	ld	hl,(_%1)
	inc	hl
	ld	(_%1),hl
	dec	hl
	ld	hl,(_%1)
=
	ld	hl,(_%1)
	inc	hl
	ld	(_%1),hl

	and	%1
	and	a
=
	and	%1

	ld	l,(hl)
	ld	h,0
	ld	de,%1
	add	hl,de
	ld	h,0
=
	ld	a,(hl)
	ld	de,%1
	add	e
	ld	l,a
	ld	h,0

%notcpu 8080
	ld	e,(hl)
	ld	d,0
	ld	hl,2
	call	l_asr_u
=
	ld	a,(hl)
	srl	a
	srl	a
	ld	l,a
	ld	h,0
	ld	de,255

	ld	l,a
	ld	h,0
	ld	a,l
	and	%1
	ld	l,a
	ld	h,0
=
	and	%1
	ld	l,a
	ld	h,0

	ld	l,(hl)
	ld	h,0
	add	hl,hl
	add	hl,hl
	add	hl,hl
	ld	h,0
=
	ld	a,(hl)
	add	a
	add	a
	add	a
	ld	l,a
	ld	h,0

	ld	h,0
	pop	de
	call	l_or
=
	pop	de
	ld	h,d
	ld	a,l
	or	e
	ld	l,a

%notcpu 8080
	ld	l,0
	ld	a,1
	call	l_long_aslo
=
	ld	l,0
	sla	h
	rl	e
	rl	d

	ld	hl,0	;const
	add	hl,sp
	ld	l,(hl)
	ld	h,0
=
	pop	hl
	push	hl
	ld	h,0

	scf
	jr	z,ASMPC+3
	ccf
	call	c,%1
=
	call	z,%1

	scf
	jr	z,ASMPC+3
	ccf
	jp	nc,%1
=
	jp	nz,%1

	jr	z,ASMPC+3
	scf
	jp	nc,%1
=
	jp	z,%1

	scf
	jr	z,ASMPC+3
	ccf
	ld	hl,0	;const
	rl	l
=
	ld	hl,1	;const
	jr	z,ASMPC+3
	dec	hl

	jr	z,ASMPC+3
	scf
	ld	hl,0	;const
	rl	l
=
	ld	hl,0	;const
	jr	z,ASMPC+3
	inc	hl

	ld	l,(hl)
	ld	h,0
	ld	a,l
	cp	%1
	ld	hl,%2
	jr	%3z,%4
=
	ld	a,%1
	cp	(hl)
	ld	hl,%2
	jr	%3z,%4

	jr	nz,ASMPC+3
	scf
	jp	nc,%1
=
	jp	nz,%1

	jr	nz,ASMPC+3
	scf
	ld	hl,0	;const
	rl	l
=
	ld	hl,0	;const
	jr	nz,ASMPC+3
	inc	l

	ld	l,(hl)
	ld	h,0
	ld	a,%1
	sub	l
	ld	hl,%2	;const
=
	ld	a,%1
	sub	(hl)
	ld	hl,%2	;const

	ld	l,(hl)
	ld	h,0
	ld	a,l
	sub	%1
	ld	hl,%2
=
	ld	a,(hl)
	sub	%1
	ld	hl,%2

	ld	l,(hl)
	ld	h,0
	ld	a,%1
	sub	l
	ccf
	ld	hl,%2
=
	ld	a,%1
	sub	(hl)
	ccf
	ld	hl,%2

	ld	hl,(_%1)
	ld	h,0
	ld	a,l
	sub	%2
	jp	c,%4
	ld	hl,%3
=
	ld	a,(_%1)
	sub	%2
	jp	c,%4
	ld	hl,%3

	ld	hl,(_%1)
	ld	h,0
	ld	a,l
	sub	%2
	ccf
	jp	c,%3
	ld	hl,%4
=
	ld	a,(_%1)
	sub	%2
	jp	nc,%3
	ld	hl,%4

	ld	hl,(_%1)
	ld	h,0
	ld	a,l
	sub	%2
	jp	nc,%3
	ld	hl,%4
=
	ld	a,(_%1)
	sub	%2
	jp	nc,%3
	ld	hl,%4

	pop	hl
	push	hl
	ld	l,h
	ld	h,0
	ld	a,l
	cp	%1
=
	ld	hl,1	;const
	add	hl,sp
	ld	a,(hl)
	cp	+(%1 %% 256)

	pop	hl
	push	hl
	ld	h,0
	ld	a,l
	cp	%1
=
	ld	hl,0	;const
	add	hl,sp
	ld	a,(hl)
	cp	+(%1 %% 256)

	pop	bc
	pop	hl
	push	hl
	push	bc
	ld	de,%1
	ex	de,hl
=
	pop	bc
	pop	de
	push	de
	push	bc
	ld	hl,%1

	jr	nz,ASMPC+3
	scf
	jp	c,%1
=
	jp	z,%1

	ld	hl,0	;const
	jr	nz,ASMPC+3
	inc	l
	ld	a,h
	or	l
	ld	hl,0	;const
	jr	nz,ASMPC+3
	inc	l
=
	ld	hl,1	;const
	jr	nz,ASMPC+3
	dec	l

	ld	hl,1	;const
	jr	z,ASMPC+3
	dec	hl
	ld	a,h
	or	l
	ld	hl,0	;const
	jr	nz,ASMPC+3
	inc	l
=
	ld	hl,0
	jr	z,ASMPC+3
	inc	l

	call	l_declong
.i_%1
	ld	hl,%2
=
.i_%1
	ld	hl,%2

	call	l_inclong
.i_%1
	ld	hl,%2
=
.i_%1
	ld	hl,%2

	pop	bc
	pop	hl
	push	hl
	push	bc
	ld	bc,%1
	add	hl,bc
	pop	de
	pop	bc
	push	hl
	push	de
=
	pop	de
	pop	hl
	ld	bc,%1
	add	hl,bc
	push	hl
	push	de

	ld	h,(hl)
	ld	l,a
	%1c	hl
	pop	hl
	push	hl
=
	pop	hl
	push	hl

	ld	de,0
	ld	hl,%1
	call	l_asr_u
	inc	e
=
	ld	hl,0	;const
	ld	de,0

	ld	hl,0	;const
	ld	de,0
	pop	bc
	add	hl,bc
	ex	de,hl
	pop	bc
	adc	hl,bc
	ex	de,hl
=
	pop	hl
	pop	de

	push	hl
	call	l_glong2sp
	pop	hl
	pop	de
	pop	bc
	call	l_plong
=
	call	l_glong

	call	l_g%3
.i_%1
	ld	hl,%2
=
.i_%1
	ld	hl,%2

	ld	hl,%1	;const
	add	hl,sp
	call	l_gint	;
	ld	bc,%2
	add	hl,bc
.i_%3
	ld	hl,%4
=
.i_%3
	ld	hl,%4

	call	l_glong
	ld	hl,%1
=
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	hl,%1

	push	de
	ld	hl,%1
	add	hl,de
	pop	bc
	push	hl
=
	ld	hl,%1
	add	hl,de
	push	hl

	ld	hl,(_%1)
	ld	h,0
	ld	a,l
	cp	%2
	jp	nz,%3
	ld	hl,%4
=
	ld	a,(_%1)
	cp	%2
	jp	nz,%3
	ld	hl,%4

	ld	hl,(_%1)
	ld	h,0
	ld	a,l
	and	+(128 %% 256)
	jp	z,%2
	ld	hl,%3
=
	ld	a,(_%1)
	rlca
	jp	nc,%2
	ld	hl,%3

%eval 2 = %2 %1 -
	ld	hl,%1	;const
	add	hl,sp
	push	hl
	ld	hl,%2	;const
	add	hl,sp
=
	ld	hl,%1	;const
	add	hl,sp
	push	hl

	push	de
	push	hl
	ld	hl,0	;const
	add	hl,sp
	call	l_glong
=
	push	de
	push	hl

	ld	de,%1
	ld	a,l
	ld	l,h
	ld	h,a
	ld	de,%2
=
	ld	a,l
	ld	l,h
	ld	h,a
	ld	de,%2

	call	l_glong
	ld	a,l
	ld	l,d
	ld	d,a
	ld	a,h
	ld	h,e
	ld	e,a
=
	ld	d,(hl)
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	l,(hl)
	ld	h,a

	ld	hl,(_%1)
	ld	h,0
	add	hl,de
	ld	h,0
	ld	a,l
	ld	(_%2),a
	%3	hl%4
=
	ld	a,(_%1)
	add	e
	ld	(_%2),a
	%3	hl%4

	call	l_glong
	ld	de,0
=
	call	l_gint
	ld	de,0

	ld	hl,(_%1)
	ld	h,0
	ld	a,l
	cp	%2
	ld	hl,%3
=
	ld	a,(_%1)
	cp	%2
	ld	hl,%3

	ld	h,0
	ld	a,l
	and	%2
	ld	l,a
	ld	h,0
=
	ld	h,0
	ld	a,%2
	and	l
	ld	l,a

	ld	l,(hl)
	ld	h,0
	call	l_sxt
=
	ld	a,(hl)
	call	l_sxt

	ld	hl,(_%1)
	ld	h,0
	call	l_lneg
	jp	nc,%2
=
	ld	a,(_%1)
	and	a
	jp	nz,%2

	ld	l,(hl)
	ld	h,0
	call	l_lneg
	jp	c,%1
=
	ld	a,(hl)
	and	a
	jp	z,%1

	ld	l,(hl)
	ld	h,0
	ld	a,l
	sub	%1
	jp	%2c,%3
=
	ld	a,(hl)
	sub	%1
	jp	%2c,%3

	ld	hl,(_%1)
	ld	h,0
	ld	a,l
	call	l_sxt
=
	ld	a,(_%1)
	ld	l,a
	rla	
	sbc	a
	ld	h,a

	ld	hl,(_%1)
	ld	h,0
	ld	a,l
	and	%2
	jp	z,%3
	ld	hl,%4
=
	ld	a,(_%1)
	and	%2
	jp	z,%3
	ld	hl,%4

	ld	hl,(_%1)
	ld	h,0
	ld	de,4
	call	l_asr_u_hl_by_e
=
	ld	a,(_%1)
	rra
	rra
	rra
	rra
	and	15
	ld	l,a
	ld	h,0

	ld	d,(hl)
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	l,(hl)
	ld	h,a
	ld	a,l
	and	%1
	ld	l,a
	ld	h,0
	ld	de,0
=
	inc	hl
	inc	hl
	inc	hl
	ld	a,(hl)
	and	%1
	ld	l,a
	ld	h,0
	ld	de,0

	ld	l,a
	ld	h,0
	ld	de,0
	ld	a,h
	or	l
	jp	z,%2
	ld	hl,%3
=
	and	a
	jp	z,%2
	ld	hl,%3

	ld	d,(hl)	;broken
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	l,(hl)
	ld	h,a
	ld	a,l
	ld	l,d
	ld	d,a
	ld	a,h
	ld	h,e
	ld	e,a
=
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ex	de,hl

%notcpu 8080
	push	hl
	ld	l,(hl)
	ld	h,0
	srl	l
	pop	de
	ld	a,l
	ld	(de),a
=
	srl	(hl)

	call	l_ghtonsint
	ld	a,h
	and	%1
	ld	h,a
	ld	l,0
=
	ld	a,(hl)
	and	%1
	ld	h,a
	ld	l,0

	and	%1
	ld	h,a
	ld	l,0
	and	a
	jp	z,%2
	ld	hl,%3
=
	and	%1
	jp	z,%2
	ld	hl,%3

	ld	hl,(_%1)
	ld	h,0
	ld	a,+%2
	and	l
	ld	l,a
	push	hl
=
	ld	a,(_%1)
	and	+%2
	ld	l,a
	ld	h,0
	push	hl	

	scf
	jr	z,ASMPC+3
	and	a
	jr	c,%2
.%3
	jp	%4
.%2
=
	scf
	jr	z,%2
	and	a
.%3
	jp	%4
.%2

	ld	hl,(_%1)
	ld	h,0
	ld	de,0
	ld	d,e
	ld	e,h
	ld	h,l
	ld	l,0
=
	ld	hl,(_%1 - 1)
	ld	l,0
	ld	de,0

	ld	l,(hl)
	ld	h,0
	ld	a,l
	sub	e
	and	a
	jp	z,%1
	pop	hl
=
	ld	a,(hl)
	sub	e
	and	a
	jp	z,%1
	pop	hl

	call	l_glong2sp
	ld	hl,%1	;const
	ld	de,0
	call	l_long_and
	pop	de
	call	l_pint
	ld	hl,%2
=
	pop	bc
	ld	a,(hl)
	and	+(%1 %% 256)
	ld	(bc),a
	inc	bc
	inc	hl
	ld	a,(hl)
	and	+(%1 / 256)
	ld	(bc),a
	ld	hl,%2

	push	hl
	ld	hl,%1	;const
	add	hl,sp
	pop	bc
=
	ld	c,l
	ld	b,h
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp

%check 0 <= %1 <= 7
%notcpu 8080
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	l,(hl)
	ld	h,0
	ex	de,hl
	ld	c,%1
	call	l_long_asr_uo
	pop	de
	ld	a,l
	ld	(de),a
	ld	hl,%2
=
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	b,%1
.i_x%L	rr	h
	rra
	djnz	i_x%L
	pop	de
	ld	(de),a
	ld	hl,%2

	ld	h,0
	ld	de,3
	call	l_asr_u_hl_by_e
	ld	a,l
	and	%1
=
	ld	a,l
	rra
	rra
	rra
	and	31
	and	%1
	ld	l,a

	ld	l,a
	ld	l,a
=
	ld	l,a

	ld	l,a
	ld	h,0
	ld	a,l
=
	ld	l,a
	ld	h,0

	ld	h,0
	ld	de,6
	call	l_asr_u_hl_by_e
	ld	h,0
=
	ld	a,l
	rlca
	rlca
	and	3
	ld	l,a
	ld	h,0

	ld	l,a
	ld	h,0
	ld	(_%1),a
	pop	hl
=
	ld	(_%1),a
	pop	hl

	ld	h,0
	ld	de,4
	call	l_asr_u_hl_by_e
=
	ld	h,0
	ld	a,l
	rrca
	rrca
	rrca
	rrca
	and	15
	ld	l,a

	ld	hl,(_%1)
	ld	h,0
	ld	a,l
	and	a
	jp	%2
	ld	hl,%3
=
	ld	a,(_%1)
	and	a
	jp	%2
	ld	hl,%3

	ld	hl,%1	;const
	add	hl,sp
	push	hl
	ld	hl,%2	;const
	add	hl,sp
	ld	l,(hl)
	ld	h,0
	%3c	hl
	pop	de
	ld	a,l
	ld	(de),a
	ld	hl,%4
=
	ld	hl,%2	;const
	add	hl,sp
	ld	a,(hl)
	%3c	a
	ld	hl,%1	;const
	add	hl,sp
	ld	(hl),a
	ld	hl,%4

	push	hl
	ld	e,(hl)
	ld	d,0
	ld	hl,%1	;const
	add	hl,sp
	ld	l,(hl)
	ld	h,0
	add	hl,de
	pop	de
	ld	a,l
	ld	(de),a
	ld	hl,%2
=
	ld	a,(hl)
	ex	de,hl
	ld	hl,%1	;const
	add	hl,sp
	add	(hl)
	ld	(de),a
	ld	hl,%2

%notcpu gbz80
	push	de
	ld	l,e
	ld	h,d
	pop	bc
=
	ex	de,hl

	push	hl
	ld	hl,%1	;const
	add	hl,sp
	ld	a,(hl)
	pop	de
	ld	(de),a
	ld	hl,%2
=
	ex	de,hl
	ld	hl,%eval( %1 2 -)	;const
	add	hl,sp
	ld	a,(hl)
	ld	(de),a
	ld	hl,%2

	ld	hl,%1	;const
	add	hl,sp
	ld	a,(hl)
	ld	(de),a
	ld	hl,%1	;const
	add	hl,sp
=
	ld	hl,%1
	add	hl,sp
	ld	a,(hl)
	ld	(de),a

	ld	(de),a
	ld	a,(hl)
=
	ld	(de),a

	ld	hl,0	;const
	ld	de,0
	call	l_long_add
=
	pop	de
	pop	hl

	push	hl
	call	l_glong2sp
	pop	de
	pop	hl
	pop	bc
	call	l_plong
=
	call	l_glong	

	ld	l,(hl)
	ld	h,l
	ld	l,0
=
	ld	h,(hl)
	ld	l,0

	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	hl,%1	;const
	call	l_pint
	ld	hl,%2
=
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	(hl),+(%1 %% 256)
	inc	hl
	ld	(hl),+(%1 / 256)
	ld	hl,%2

	ld	(hl),+(0 % 256)
	inc	hl
	ld	(hl),+(0 / 256)
=
	xor	a
	ld	(hl),a
	inc	hl
	ld	(hl),a

	ld	l,a
	ld	h,0
	call	l_lneg
	jp	%2c,%1
=
	and	a
	jp	%2z,%1

%notcpu 8080
	push	hl
	call	l_gint	;
	res	%1,l
	pop	de
	call	l_pint
=
	res	%1,(hl)
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a

	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
.%1
	ld	hl,%2	;const
=
.%1
	ld	hl,%2	;const

%check 0 <= %1 <= 127
	call	l_gchar
	ld	de,%1
	and	a
	sbc	hl,de
	jp	%2,%3
	ld	hl,%4
=
	ld	a,(hl)
	cp	%1
	jp	%2,%3
	ld	hl,%4

	call	l_gchar
	ld	a,l
	cp	%1
	jp	%2,%3
	ld	hl,%4
=
	ld	a,(hl)
	cp	%1
	jp	%2,%3
	ld	hl,%4

	call	l_gchar
	ld	a,l
	and	a
	jp	%1
	ld	hl,%2
=
	ld	a,(hl)
	and	a
	jp	%1
	ld	hl,%2

	call	l_gchar
	ld	a,l
	call	l_sxt
=
	call	l_gchar

	call	l_gchar
	pop	de
	ld	a,l
	ld	(de),a
	ld	hl,%1
=
	pop	de
	ld	a,(hl)
	ld	(de),a
	ld	hl,%1

%check 0 <= %1 <= 127
	call	l_gchar
	ld	de,%1
	and	a
	sbc	hl,de
	scf
	jr	%2,ASMPC+3
	ccf
	j%4	%3
=
	ld	a,(hl)
	cp	%1
	scf
	jr	%2,ASMPC+3
	ccf
	j%4	%3

	inc	hl
	ld	bc,%1
	add	hl,bc
=
	ld	bc,%eval( %1 1 +)
	add	hl,bc

	dec	hl
	ld	bc,%1
	add	hl,bc
=
	ld	bc,%eval( %1 1 -)
	add	hl,bc

	push	hl
	ld	hl,0	;const
	call	l_gintspsp	;%1
=
	push	hl
	push	hl

	ld	l,(hl)
	ld	h,0
	ld	de,6
	call	l_asr_u_hl_by_e
	ld	a,l
	and	+(3 %% 256)
	ld	l,a
=
	ld	a,(hl)
	rlca
	rlca
	and	+(3 %% 256)
	ld	l,a
	ld	h,0

	ld	l,(hl)
	ld	h,0
	ld	a,l
	ld	(%1),a
	ld	hl,%2
=
	ld	a,(hl)
	ld	(%1),a
	ld	hl,%2

	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ex	de,hl
	ld	de,0	;
	ld	h,0
=
	ld	l,(hl)
	ld	h,0
	ld	de,0

	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	l,(hl)
	ld	h,0
	ex	de,hl
	ld	h,0
=
	ld	e,(hl)
	inc	hl
	inc	hl
	ld	l,(hl)
	ld	h,0
	ex	de,hl
	ld	h,0

%check 9 <= %1 <= 15
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	hl,%1
	call	l_asr_u
=
	inc	hl
	ld	e,(hl)
	ld	d,0
	ld	hl,%eval(%1 8 -)
	call	l_asr_u

	ld	de,255
	inc	e
=
	ld	de,0

	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ex	de,hl
	ld	de,0
	ld	h,0
=
	ld	l,(hl)
	ld	h,0
	ld	de,0

	sbc	hl,de
	jp	nz,%1
	ld	hl,0	;const
=
	sbc	hl,de
	jp	nz,%1

	push	hl
	ld	hl,%1	;const
	add	hl,sp
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ex	de,hl
	pop	de
=
	ex	de,hl
	ld	hl,%eval(%1 2 -)	;const
	add	hl,sp
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a

	call	l_glong
	ld	de,%1
=
	call	l_gint
	ld	de,%1

	ld	de,0
	ld	a,d
	or	e
	or	h
	or	l
=
	ld	de,0
	ld	a,h
	or	l

	ld	hl,%1
	push	hl
	ld	hl,%2	;const
	add	hl,sp
	ex	de,hl
	pop	bc
=
	ld	hl,%eval(%2 2 -)	;const
	add	hl,sp
	ex	de,hl
	ld	bc,%1

	ld	hl,%1	;const
	add	hl,sp
	ld	sp,hl
	ld	hl,%2	;const
	add	hl,sp
	ld	sp,hl
=
	ld	hl,%eval(%1 %2 + 65536 %%)	;const
	add	hl,sp
	ld	sp,hl

	ld	de,%1	;const
	ex	de,hl
	ld	a,l
	rlca
=
	ld	de,%eval(%1 1 <)	;const
	ex	de,hl
	ld	a,l

	ld	hl,%1
	ld	de,%2	;const
	ex	de,hl
	ld	a,l
	and	%3
	ld	l,a
	ld	a,(de)
	and	%4
	or	l
	ld	(de),a
	ld	hl,%5
=
	ld	hl,%1
	ld	a,(hl)
	and	%4
	or	%eval( %2 256 %% %3 &)
	ld	(hl),a
	ld	hl,%5

	ld	hl,_%1
	ld	de,%2
	ex	de,hl
	inc	de
=
	ld	hl,_%1 + 1
	ld	de,%2
	ex	de,hl

	ld	hl,%1	;const
	add	hl,hl
=
	ld	hl,%eval(%1 2 *)	;const

%check 0 <= %2 <= 65535
	ld	hl,%1	;const
	ld	de,%2
	call	l_and
=
	ld	hl,%eval(%1 %2 &)

%check 0 <= %2 <= 65535
	ld	hl,%1	;const
	ld	de,%2
	call	l_or
=
	ld	hl,%eval(%1 %2 |)

	ld	a,(de)
	and	0
	or	l
	ld	(de),a
=
	ld	a,l
	ld	(de),a

	ld	a,(de)
	and	0
	or	h
	ld	(de),a
=
	ld	a,h
	ld	(de),a

%check 0 <= %1 <= 65535
	ld	de,%2
	ld	hl,%1
	ld	a,l
	ld	(de),a
	inc	de
	ld	a,(de)
	and	%3
	or	h
	ld	(de),a
	ld	hl,%4
=
	ld	hl,%2
	ld	(hl),%eval(%1 256 %%)
	inc	hl
	ld	a,(hl)
	and	%3
	or	%eval(%1 256 /)
	ld	(hl),a
	ld	hl,%4

	ld	hl,%1	;const
	ld	(%2),hl
	ld	hl,%1
=
	ld	hl,%1	;const
	ld	(%2),hl

	ld	a,l
	and	255
	ld	l,a
=


	ld	hl,%1
	ld	de,%4	;const
	ex	de,hl
	ld	a,l
	and	%2
	ld	l,a
	ld	a,(de)
	and	%3
	or	l
	ld	(de),a
=
	ld	hl,%1
	ld	a,(hl)
	and	%3
	or	%eval(%4 256 %% %2 &)
	ld	(hl),a
	ld	hl,%4

	ld	hl,%1
	ld	hl,_%2
=
	ld	hl,_%2

	or	0
=


	and	255
=


	ld	a,l
	ld	l,a
	ld	a,l
=
	ld	a,l

	ld	e,(hl)
	inc	hl
	ld	a,(hl)
	ld	h,a
	ld	l,e
=
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a

	scf
	jr	nz,ASMPC+3
	ccf
	jr	c,%1
.%2
	jp	%3
.%1
	ld	hl,%4
=
	jr	nz,%1
.%2
	jp	%3
.%1
	ld	hl,%4

	dec	hl
.%1
	ld	hl,%2
=
.%1
	ld	hl,%2

	ld	h,(hl)
	ld	l,a
	pop	hl
=
	pop	hl

	push	hl
	ld	a,(hl)
	cp	%1
	jp	%2
	pop	hl
	push	hl
	inc	hl
=
	push	hl
	ld	a,(hl)
	cp	%1
	jp	%2
	inc	hl

	push	hl
	ld	hl,0	;const
	ld	d,h
	ld	e,l
	pop	bc
	call	l_plong
	ld	hl,%1
	add	hl,sp
=
	xor	a
	ld	(hl),a
	inc	hl
	ld	(hl),a
	inc	hl
	ld	(hl),a
	inc	hl
	ld	(hl),a
	ld	hl,%1
	add	hl,sp

	ld	h,(hl)
	ld	l,a
.%1
	ld	hl,%2
=
.%1
	ld	hl,%2

	ld	a,h
	or	l
	jp	nz,%1
	jr	%2
.%1
	ld	hl,1	;const
.%2
	ld	a,h
	or	l
=
	ld	a,h
	or	l
	jr	z,%2
.%1
	ld	hl,1	;const
.%2
	ld	a,h
	or	l

	ld	a,+(%1 % 256)
	call	l_sxt
=
	ld	hl,%1

	ld	l,(hl)
	ld	h,0
	ld	de,%1
	call	l_and
=
	ld	a,(hl)
	and	%eval(%1 256 %%)
	ld	l,a
	ld	h,0

	ld	l,a
	ld	h,0
	ex	de,hl
	ld	hl,%1	;const
	add	hl,sp
	ld	l,(hl)
	ld	h,0
	call	l_or
	pop	de
	ld	a,l
	ld	(de),a
	ld	hl,%2
=
	ld	hl,%1	;const
	add	hl,sp
	or	(hl)
	pop	de
	ld	(de),a
	ld	hl,%2

	ld	de,1
	and	a
	sbc	hl,de
	jp	nz,%1
	ld	hl,%2
=
	dec	hl
	ld	a,h
	or	l
	jp	nz,%1
	ld	hl,%2

	and	%1
	ld	h,a
	ld	l,0
	and	a
=
	and	%1
	ld	h,a
	ld	l,0

	ld	l,(hl)
	ld	h,0
	call	l_lneg
	jp	%1c,%2
=
	ld	a,(hl)
	and	a
	jp	%1z,%2

	ld	a,h
	and	+(255 %% 256)
	ld	h,a
=

	ld	a,(hl)
	or	128
	ld	(hl),a
	ld	l,a
	ld	h,0
=
	set	7,(hl)
	ld	l,(hl)
	ld	h,0

	ld	l,(hl)
	ld	h,0
	ld	a,l
	and	+%1
	jp	%2,%3
	ld	hl,%4
=
	ld	a,+%1
	and	(hl)
	jp	%2,%3
	ld	hl,%4

	call	l_gint	;
	ld	a,l
	and	+%1
	ld	l,a
	ld	h,0
=
	ld	a,(hl)
	and	+%1
	ld	l,a
	ld	h,0

	inc	hl
	inc	hl
	ld	(_%1),hl
	dec	hl
	dec	hl
	ld	(hl),%2
	inc	hl
	ld	(hl),%3
=
	ld	(hl),%2
	inc	hl
	ld	(hl),%3
	inc	hl
	ld	(_%1),hl

	call	l_gchar
	ld	h,0
=
	ld	l,(hl)
	ld	h,0

%cpu gbz80
	ld	hl,_%1
	push	hl
	ld	hl,_%2
	pop	de
	push	de
=
	ld	de,_%1
	ld	hl,_%2
	push	de

	ld	hl,_%1
	ld	l,(hl)
	ld	h,0
	inc	hl
	ld	a,l
	ld	(_%1),a
	dec	hl
=
	ld	hl,_%1
	inc	(hl)
	ld	l,(hl)
	dec	l
	ld	h,0
